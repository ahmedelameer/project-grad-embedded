
SMARTLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000027a6  0000281a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001fc8  00000000  00000000  00002824  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a8f  00000000  00000000  000047ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000527b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000053bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000552b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007174  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000805f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000091f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000099c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 77 0f 	call	0x1eee	; 0x1eee <main>
      7a:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 7d 13 	jmp	0x26fa	; 0x26fa <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <LCD_init>:

#include"LCD.h"



void LCD_init(void){
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
   /* set the control pins as output pins*/
	DIRECTION_CTRL_PINS |=(1<<RS)|(1<<RW)|(1<<E);
     b3e:	a7 e3       	ldi	r26, 0x37	; 55
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e7 e3       	ldi	r30, 0x37	; 55
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8e 60       	ori	r24, 0x0E	; 14
     b4a:	8c 93       	st	X, r24
     #ifdef FIRST_PINS
	         DIRECTION_DATA_PINS|=0x0F;
	         LCD_sendCommand(BITS_4_MODES);
	         LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
     #else
	         DIRECTION_DATA_PINS|=0xF0;
     b4c:	aa e3       	ldi	r26, 0x3A	; 58
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	ea e3       	ldi	r30, 0x3A	; 58
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	80 6f       	ori	r24, 0xF0	; 240
     b58:	8c 93       	st	X, r24
	         LCD_sendCommand(BITS_4_MODES);
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_sendCommand>
	         LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
     b60:	88 e2       	ldi	r24, 0x28	; 40
     b62:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_sendCommand>
#endif



	/*display on cursor off*/
	LCD_sendCommand(CURSOR_OFF);
     b66:	8c e0       	ldi	r24, 0x0C	; 12
     b68:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_sendCommand>
	/* clear the screen first*/
	LCD_sendCommand(CLEAR_LCD);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_sendCommand>
}
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	08 95       	ret

00000b78 <LCD_sendCommand>:

void LCD_sendCommand(unit8 command){
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	c3 56       	subi	r28, 0x63	; 99
     b86:	d0 40       	sbci	r29, 0x00	; 0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	fe 01       	movw	r30, r28
     b94:	ed 59       	subi	r30, 0x9D	; 157
     b96:	ff 4f       	sbci	r31, 0xFF	; 255
     b98:	80 83       	st	Z, r24
	/*make RS=0 to send command*/
	Pin_clear(CTRL_OUTPUT_PINS  ,RS);
     b9a:	a8 e3       	ldi	r26, 0x38	; 56
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e8 e3       	ldi	r30, 0x38	; 56
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	8d 7f       	andi	r24, 0xFD	; 253
     ba6:	8c 93       	st	X, r24
	/*make RW=0 to write command*/
	Pin_clear(CTRL_OUTPUT_PINS ,RW);
     ba8:	a8 e3       	ldi	r26, 0x38	; 56
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	e8 e3       	ldi	r30, 0x38	; 56
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	8b 7f       	andi	r24, 0xFB	; 251
     bb4:	8c 93       	st	X, r24
     bb6:	fe 01       	movw	r30, r28
     bb8:	e1 5a       	subi	r30, 0xA1	; 161
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e8       	ldi	r26, 0x80	; 128
     bc2:	bf e3       	ldi	r27, 0x3F	; 63
     bc4:	80 83       	st	Z, r24
     bc6:	91 83       	std	Z+1, r25	; 0x01
     bc8:	a2 83       	std	Z+2, r26	; 0x02
     bca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bcc:	8e 01       	movw	r16, r28
     bce:	05 5a       	subi	r16, 0xA5	; 165
     bd0:	1f 4f       	sbci	r17, 0xFF	; 255
     bd2:	fe 01       	movw	r30, r28
     bd4:	e1 5a       	subi	r30, 0xA1	; 161
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	60 81       	ld	r22, Z
     bda:	71 81       	ldd	r23, Z+1	; 0x01
     bdc:	82 81       	ldd	r24, Z+2	; 0x02
     bde:	93 81       	ldd	r25, Z+3	; 0x03
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	4a e7       	ldi	r20, 0x7A	; 122
     be6:	53 e4       	ldi	r21, 0x43	; 67
     be8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	f8 01       	movw	r30, r16
     bf2:	80 83       	st	Z, r24
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	a2 83       	std	Z+2, r26	; 0x02
     bf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bfa:	fe 01       	movw	r30, r28
     bfc:	e5 5a       	subi	r30, 0xA5	; 165
     bfe:	ff 4f       	sbci	r31, 0xFF	; 255
     c00:	60 81       	ld	r22, Z
     c02:	71 81       	ldd	r23, Z+1	; 0x01
     c04:	82 81       	ldd	r24, Z+2	; 0x02
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e8       	ldi	r20, 0x80	; 128
     c0e:	5f e3       	ldi	r21, 0x3F	; 63
     c10:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c14:	88 23       	and	r24, r24
     c16:	44 f4       	brge	.+16     	; 0xc28 <LCD_sendCommand+0xb0>
		__ticks = 1;
     c18:	fe 01       	movw	r30, r28
     c1a:	e7 5a       	subi	r30, 0xA7	; 167
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	91 83       	std	Z+1, r25	; 0x01
     c24:	80 83       	st	Z, r24
     c26:	64 c0       	rjmp	.+200    	; 0xcf0 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
     c28:	fe 01       	movw	r30, r28
     c2a:	e5 5a       	subi	r30, 0xA5	; 165
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	60 81       	ld	r22, Z
     c30:	71 81       	ldd	r23, Z+1	; 0x01
     c32:	82 81       	ldd	r24, Z+2	; 0x02
     c34:	93 81       	ldd	r25, Z+3	; 0x03
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	3f ef       	ldi	r19, 0xFF	; 255
     c3a:	4f e7       	ldi	r20, 0x7F	; 127
     c3c:	57 e4       	ldi	r21, 0x47	; 71
     c3e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c42:	18 16       	cp	r1, r24
     c44:	0c f0       	brlt	.+2      	; 0xc48 <LCD_sendCommand+0xd0>
     c46:	43 c0       	rjmp	.+134    	; 0xcce <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c48:	fe 01       	movw	r30, r28
     c4a:	e1 5a       	subi	r30, 0xA1	; 161
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	60 81       	ld	r22, Z
     c50:	71 81       	ldd	r23, Z+1	; 0x01
     c52:	82 81       	ldd	r24, Z+2	; 0x02
     c54:	93 81       	ldd	r25, Z+3	; 0x03
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	40 e2       	ldi	r20, 0x20	; 32
     c5c:	51 e4       	ldi	r21, 0x41	; 65
     c5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	8e 01       	movw	r16, r28
     c68:	07 5a       	subi	r16, 0xA7	; 167
     c6a:	1f 4f       	sbci	r17, 0xFF	; 255
     c6c:	bc 01       	movw	r22, r24
     c6e:	cd 01       	movw	r24, r26
     c70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	f8 01       	movw	r30, r16
     c7a:	91 83       	std	Z+1, r25	; 0x01
     c7c:	80 83       	st	Z, r24
     c7e:	1f c0       	rjmp	.+62     	; 0xcbe <LCD_sendCommand+0x146>
     c80:	fe 01       	movw	r30, r28
     c82:	e9 5a       	subi	r30, 0xA9	; 169
     c84:	ff 4f       	sbci	r31, 0xFF	; 255
     c86:	89 e1       	ldi	r24, 0x19	; 25
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	91 83       	std	Z+1, r25	; 0x01
     c8c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c8e:	fe 01       	movw	r30, r28
     c90:	e9 5a       	subi	r30, 0xA9	; 169
     c92:	ff 4f       	sbci	r31, 0xFF	; 255
     c94:	80 81       	ld	r24, Z
     c96:	91 81       	ldd	r25, Z+1	; 0x01
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <LCD_sendCommand+0x120>
     c9c:	fe 01       	movw	r30, r28
     c9e:	e9 5a       	subi	r30, 0xA9	; 169
     ca0:	ff 4f       	sbci	r31, 0xFF	; 255
     ca2:	91 83       	std	Z+1, r25	; 0x01
     ca4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca6:	de 01       	movw	r26, r28
     ca8:	a7 5a       	subi	r26, 0xA7	; 167
     caa:	bf 4f       	sbci	r27, 0xFF	; 255
     cac:	fe 01       	movw	r30, r28
     cae:	e7 5a       	subi	r30, 0xA7	; 167
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	80 81       	ld	r24, Z
     cb4:	91 81       	ldd	r25, Z+1	; 0x01
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	11 96       	adiw	r26, 0x01	; 1
     cba:	9c 93       	st	X, r25
     cbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cbe:	fe 01       	movw	r30, r28
     cc0:	e7 5a       	subi	r30, 0xA7	; 167
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	d1 f6       	brne	.-76     	; 0xc80 <LCD_sendCommand+0x108>
     ccc:	27 c0       	rjmp	.+78     	; 0xd1c <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cce:	8e 01       	movw	r16, r28
     cd0:	07 5a       	subi	r16, 0xA7	; 167
     cd2:	1f 4f       	sbci	r17, 0xFF	; 255
     cd4:	fe 01       	movw	r30, r28
     cd6:	e5 5a       	subi	r30, 0xA5	; 165
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	60 81       	ld	r22, Z
     cdc:	71 81       	ldd	r23, Z+1	; 0x01
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	f8 01       	movw	r30, r16
     cec:	91 83       	std	Z+1, r25	; 0x01
     cee:	80 83       	st	Z, r24
     cf0:	de 01       	movw	r26, r28
     cf2:	ab 5a       	subi	r26, 0xAB	; 171
     cf4:	bf 4f       	sbci	r27, 0xFF	; 255
     cf6:	fe 01       	movw	r30, r28
     cf8:	e7 5a       	subi	r30, 0xA7	; 167
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	80 81       	ld	r24, Z
     cfe:	91 81       	ldd	r25, Z+1	; 0x01
     d00:	8d 93       	st	X+, r24
     d02:	9c 93       	st	X, r25
     d04:	fe 01       	movw	r30, r28
     d06:	eb 5a       	subi	r30, 0xAB	; 171
     d08:	ff 4f       	sbci	r31, 0xFF	; 255
     d0a:	80 81       	ld	r24, Z
     d0c:	91 81       	ldd	r25, Z+1	; 0x01
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <LCD_sendCommand+0x196>
     d12:	fe 01       	movw	r30, r28
     d14:	eb 5a       	subi	r30, 0xAB	; 171
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	91 83       	std	Z+1, r25	; 0x01
     d1a:	80 83       	st	Z, r24
	/*wait tas before enabling 50ns */
	_delay_ms(1);
	/* Enable =1 */
	Pin_output(CTRL_OUTPUT_PINS  ,E);
     d1c:	a8 e3       	ldi	r26, 0x38	; 56
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e8 e3       	ldi	r30, 0x38	; 56
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	88 60       	ori	r24, 0x08	; 8
     d28:	8c 93       	st	X, r24
     d2a:	fe 01       	movw	r30, r28
     d2c:	ef 5a       	subi	r30, 0xAF	; 175
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	a0 e8       	ldi	r26, 0x80	; 128
     d36:	bf e3       	ldi	r27, 0x3F	; 63
     d38:	80 83       	st	Z, r24
     d3a:	91 83       	std	Z+1, r25	; 0x01
     d3c:	a2 83       	std	Z+2, r26	; 0x02
     d3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d40:	8e 01       	movw	r16, r28
     d42:	03 5b       	subi	r16, 0xB3	; 179
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
     d46:	fe 01       	movw	r30, r28
     d48:	ef 5a       	subi	r30, 0xAF	; 175
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	60 81       	ld	r22, Z
     d4e:	71 81       	ldd	r23, Z+1	; 0x01
     d50:	82 81       	ldd	r24, Z+2	; 0x02
     d52:	93 81       	ldd	r25, Z+3	; 0x03
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	4a e7       	ldi	r20, 0x7A	; 122
     d5a:	53 e4       	ldi	r21, 0x43	; 67
     d5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	f8 01       	movw	r30, r16
     d66:	80 83       	st	Z, r24
     d68:	91 83       	std	Z+1, r25	; 0x01
     d6a:	a2 83       	std	Z+2, r26	; 0x02
     d6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d6e:	fe 01       	movw	r30, r28
     d70:	e3 5b       	subi	r30, 0xB3	; 179
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	60 81       	ld	r22, Z
     d76:	71 81       	ldd	r23, Z+1	; 0x01
     d78:	82 81       	ldd	r24, Z+2	; 0x02
     d7a:	93 81       	ldd	r25, Z+3	; 0x03
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e8       	ldi	r20, 0x80	; 128
     d82:	5f e3       	ldi	r21, 0x3F	; 63
     d84:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d88:	88 23       	and	r24, r24
     d8a:	44 f4       	brge	.+16     	; 0xd9c <LCD_sendCommand+0x224>
		__ticks = 1;
     d8c:	fe 01       	movw	r30, r28
     d8e:	e5 5b       	subi	r30, 0xB5	; 181
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
     d9a:	64 c0       	rjmp	.+200    	; 0xe64 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
     d9c:	fe 01       	movw	r30, r28
     d9e:	e3 5b       	subi	r30, 0xB3	; 179
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	60 81       	ld	r22, Z
     da4:	71 81       	ldd	r23, Z+1	; 0x01
     da6:	82 81       	ldd	r24, Z+2	; 0x02
     da8:	93 81       	ldd	r25, Z+3	; 0x03
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	3f ef       	ldi	r19, 0xFF	; 255
     dae:	4f e7       	ldi	r20, 0x7F	; 127
     db0:	57 e4       	ldi	r21, 0x47	; 71
     db2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     db6:	18 16       	cp	r1, r24
     db8:	0c f0       	brlt	.+2      	; 0xdbc <LCD_sendCommand+0x244>
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dbc:	fe 01       	movw	r30, r28
     dbe:	ef 5a       	subi	r30, 0xAF	; 175
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e2       	ldi	r20, 0x20	; 32
     dd0:	51 e4       	ldi	r21, 0x41	; 65
     dd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	8e 01       	movw	r16, r28
     ddc:	05 5b       	subi	r16, 0xB5	; 181
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	bc 01       	movw	r22, r24
     de2:	cd 01       	movw	r24, r26
     de4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	f8 01       	movw	r30, r16
     dee:	91 83       	std	Z+1, r25	; 0x01
     df0:	80 83       	st	Z, r24
     df2:	1f c0       	rjmp	.+62     	; 0xe32 <LCD_sendCommand+0x2ba>
     df4:	fe 01       	movw	r30, r28
     df6:	e7 5b       	subi	r30, 0xB7	; 183
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	89 e1       	ldi	r24, 0x19	; 25
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
     e02:	fe 01       	movw	r30, r28
     e04:	e7 5b       	subi	r30, 0xB7	; 183
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	80 81       	ld	r24, Z
     e0a:	91 81       	ldd	r25, Z+1	; 0x01
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <LCD_sendCommand+0x294>
     e10:	fe 01       	movw	r30, r28
     e12:	e7 5b       	subi	r30, 0xB7	; 183
     e14:	ff 4f       	sbci	r31, 0xFF	; 255
     e16:	91 83       	std	Z+1, r25	; 0x01
     e18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e1a:	de 01       	movw	r26, r28
     e1c:	a5 5b       	subi	r26, 0xB5	; 181
     e1e:	bf 4f       	sbci	r27, 0xFF	; 255
     e20:	fe 01       	movw	r30, r28
     e22:	e5 5b       	subi	r30, 0xB5	; 181
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	80 81       	ld	r24, Z
     e28:	91 81       	ldd	r25, Z+1	; 0x01
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	11 96       	adiw	r26, 0x01	; 1
     e2e:	9c 93       	st	X, r25
     e30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e32:	fe 01       	movw	r30, r28
     e34:	e5 5b       	subi	r30, 0xB5	; 181
     e36:	ff 4f       	sbci	r31, 0xFF	; 255
     e38:	80 81       	ld	r24, Z
     e3a:	91 81       	ldd	r25, Z+1	; 0x01
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	d1 f6       	brne	.-76     	; 0xdf4 <LCD_sendCommand+0x27c>
     e40:	27 c0       	rjmp	.+78     	; 0xe90 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e42:	8e 01       	movw	r16, r28
     e44:	05 5b       	subi	r16, 0xB5	; 181
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	fe 01       	movw	r30, r28
     e4a:	e3 5b       	subi	r30, 0xB3	; 179
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	60 81       	ld	r22, Z
     e50:	71 81       	ldd	r23, Z+1	; 0x01
     e52:	82 81       	ldd	r24, Z+2	; 0x02
     e54:	93 81       	ldd	r25, Z+3	; 0x03
     e56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	f8 01       	movw	r30, r16
     e60:	91 83       	std	Z+1, r25	; 0x01
     e62:	80 83       	st	Z, r24
     e64:	de 01       	movw	r26, r28
     e66:	a9 5b       	subi	r26, 0xB9	; 185
     e68:	bf 4f       	sbci	r27, 0xFF	; 255
     e6a:	fe 01       	movw	r30, r28
     e6c:	e5 5b       	subi	r30, 0xB5	; 181
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	8d 93       	st	X+, r24
     e76:	9c 93       	st	X, r25
     e78:	fe 01       	movw	r30, r28
     e7a:	e9 5b       	subi	r30, 0xB9	; 185
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	80 81       	ld	r24, Z
     e80:	91 81       	ldd	r25, Z+1	; 0x01
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <LCD_sendCommand+0x30a>
     e86:	fe 01       	movw	r30, r28
     e88:	e9 5b       	subi	r30, 0xB9	; 185
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	91 83       	std	Z+1, r25	; 0x01
     e8e:	80 83       	st	Z, r24

	   /*	DATA_OUTPUT_PINS = (DATA_OUTPUT_PINS & 0xF0) | ((command & 0xF0) >> 4);*/
	   	    TAKE_FTCOMMAND(DATA_OUTPUT_PINS,command);
     #else
	   	/*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS & 0x0F) | (command & 0xF0);*/
	   	  TAKE_FTCOMMAND(DATA_OUTPUT_PINS,command);
     e90:	ab e3       	ldi	r26, 0x3B	; 59
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	eb e3       	ldi	r30, 0x3B	; 59
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	98 2f       	mov	r25, r24
     e9c:	9f 70       	andi	r25, 0x0F	; 15
     e9e:	fe 01       	movw	r30, r28
     ea0:	ed 59       	subi	r30, 0x9D	; 157
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	80 81       	ld	r24, Z
     ea6:	80 7f       	andi	r24, 0xF0	; 240
     ea8:	89 2b       	or	r24, r25
     eaa:	8c 93       	st	X, r24
     eac:	fe 01       	movw	r30, r28
     eae:	ed 5b       	subi	r30, 0xBD	; 189
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	a0 e8       	ldi	r26, 0x80	; 128
     eb8:	bf e3       	ldi	r27, 0x3F	; 63
     eba:	80 83       	st	Z, r24
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	a2 83       	std	Z+2, r26	; 0x02
     ec0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec2:	8e 01       	movw	r16, r28
     ec4:	01 5c       	subi	r16, 0xC1	; 193
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	fe 01       	movw	r30, r28
     eca:	ed 5b       	subi	r30, 0xBD	; 189
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	60 81       	ld	r22, Z
     ed0:	71 81       	ldd	r23, Z+1	; 0x01
     ed2:	82 81       	ldd	r24, Z+2	; 0x02
     ed4:	93 81       	ldd	r25, Z+3	; 0x03
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	4a e7       	ldi	r20, 0x7A	; 122
     edc:	53 e4       	ldi	r21, 0x43	; 67
     ede:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	f8 01       	movw	r30, r16
     ee8:	80 83       	st	Z, r24
     eea:	91 83       	std	Z+1, r25	; 0x01
     eec:	a2 83       	std	Z+2, r26	; 0x02
     eee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ef0:	fe 01       	movw	r30, r28
     ef2:	ff 96       	adiw	r30, 0x3f	; 63
     ef4:	60 81       	ld	r22, Z
     ef6:	71 81       	ldd	r23, Z+1	; 0x01
     ef8:	82 81       	ldd	r24, Z+2	; 0x02
     efa:	93 81       	ldd	r25, Z+3	; 0x03
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e8       	ldi	r20, 0x80	; 128
     f02:	5f e3       	ldi	r21, 0x3F	; 63
     f04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f08:	88 23       	and	r24, r24
     f0a:	2c f4       	brge	.+10     	; 0xf16 <LCD_sendCommand+0x39e>
		__ticks = 1;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9e af       	std	Y+62, r25	; 0x3e
     f12:	8d af       	std	Y+61, r24	; 0x3d
     f14:	46 c0       	rjmp	.+140    	; 0xfa2 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
     f16:	fe 01       	movw	r30, r28
     f18:	ff 96       	adiw	r30, 0x3f	; 63
     f1a:	60 81       	ld	r22, Z
     f1c:	71 81       	ldd	r23, Z+1	; 0x01
     f1e:	82 81       	ldd	r24, Z+2	; 0x02
     f20:	93 81       	ldd	r25, Z+3	; 0x03
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	3f ef       	ldi	r19, 0xFF	; 255
     f26:	4f e7       	ldi	r20, 0x7F	; 127
     f28:	57 e4       	ldi	r21, 0x47	; 71
     f2a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f2e:	18 16       	cp	r1, r24
     f30:	64 f5       	brge	.+88     	; 0xf8a <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f32:	fe 01       	movw	r30, r28
     f34:	ed 5b       	subi	r30, 0xBD	; 189
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	60 81       	ld	r22, Z
     f3a:	71 81       	ldd	r23, Z+1	; 0x01
     f3c:	82 81       	ldd	r24, Z+2	; 0x02
     f3e:	93 81       	ldd	r25, Z+3	; 0x03
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e2       	ldi	r20, 0x20	; 32
     f46:	51 e4       	ldi	r21, 0x41	; 65
     f48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	bc 01       	movw	r22, r24
     f52:	cd 01       	movw	r24, r26
     f54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	9e af       	std	Y+62, r25	; 0x3e
     f5e:	8d af       	std	Y+61, r24	; 0x3d
     f60:	0f c0       	rjmp	.+30     	; 0xf80 <LCD_sendCommand+0x408>
     f62:	89 e1       	ldi	r24, 0x19	; 25
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9c af       	std	Y+60, r25	; 0x3c
     f68:	8b af       	std	Y+59, r24	; 0x3b
     f6a:	8b ad       	ldd	r24, Y+59	; 0x3b
     f6c:	9c ad       	ldd	r25, Y+60	; 0x3c
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <LCD_sendCommand+0x3f6>
     f72:	9c af       	std	Y+60, r25	; 0x3c
     f74:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f76:	8d ad       	ldd	r24, Y+61	; 0x3d
     f78:	9e ad       	ldd	r25, Y+62	; 0x3e
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	9e af       	std	Y+62, r25	; 0x3e
     f7e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f80:	8d ad       	ldd	r24, Y+61	; 0x3d
     f82:	9e ad       	ldd	r25, Y+62	; 0x3e
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	69 f7       	brne	.-38     	; 0xf62 <LCD_sendCommand+0x3ea>
     f88:	16 c0       	rjmp	.+44     	; 0xfb6 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8a:	fe 01       	movw	r30, r28
     f8c:	ff 96       	adiw	r30, 0x3f	; 63
     f8e:	60 81       	ld	r22, Z
     f90:	71 81       	ldd	r23, Z+1	; 0x01
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	9e af       	std	Y+62, r25	; 0x3e
     fa0:	8d af       	std	Y+61, r24	; 0x3d
     fa2:	8d ad       	ldd	r24, Y+61	; 0x3d
     fa4:	9e ad       	ldd	r25, Y+62	; 0x3e
     fa6:	9a af       	std	Y+58, r25	; 0x3a
     fa8:	89 af       	std	Y+57, r24	; 0x39
     faa:	89 ad       	ldd	r24, Y+57	; 0x39
     fac:	9a ad       	ldd	r25, Y+58	; 0x3a
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <LCD_sendCommand+0x436>
     fb2:	9a af       	std	Y+58, r25	; 0x3a
     fb4:	89 af       	std	Y+57, r24	; 0x39
     #endif

	/*wait tdpw to make enable =0 */
	_delay_ms(1);
	/* make enable =0*/
	Pin_clear(CTRL_OUTPUT_PINS,E);
     fb6:	a8 e3       	ldi	r26, 0x38	; 56
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e8 e3       	ldi	r30, 0x38	; 56
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	87 7f       	andi	r24, 0xF7	; 247
     fc2:	8c 93       	st	X, r24
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a0 e8       	ldi	r26, 0x80	; 128
     fca:	bf e3       	ldi	r27, 0x3F	; 63
     fcc:	8d ab       	std	Y+53, r24	; 0x35
     fce:	9e ab       	std	Y+54, r25	; 0x36
     fd0:	af ab       	std	Y+55, r26	; 0x37
     fd2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd4:	6d a9       	ldd	r22, Y+53	; 0x35
     fd6:	7e a9       	ldd	r23, Y+54	; 0x36
     fd8:	8f a9       	ldd	r24, Y+55	; 0x37
     fda:	98 ad       	ldd	r25, Y+56	; 0x38
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	4a e7       	ldi	r20, 0x7A	; 122
     fe2:	53 e4       	ldi	r21, 0x43	; 67
     fe4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	89 ab       	std	Y+49, r24	; 0x31
     fee:	9a ab       	std	Y+50, r25	; 0x32
     ff0:	ab ab       	std	Y+51, r26	; 0x33
     ff2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ff4:	69 a9       	ldd	r22, Y+49	; 0x31
     ff6:	7a a9       	ldd	r23, Y+50	; 0x32
     ff8:	8b a9       	ldd	r24, Y+51	; 0x33
     ffa:	9c a9       	ldd	r25, Y+52	; 0x34
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e8       	ldi	r20, 0x80	; 128
    1002:	5f e3       	ldi	r21, 0x3F	; 63
    1004:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1008:	88 23       	and	r24, r24
    100a:	2c f4       	brge	.+10     	; 0x1016 <LCD_sendCommand+0x49e>
		__ticks = 1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	98 ab       	std	Y+48, r25	; 0x30
    1012:	8f a7       	std	Y+47, r24	; 0x2f
    1014:	3f c0       	rjmp	.+126    	; 0x1094 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1016:	69 a9       	ldd	r22, Y+49	; 0x31
    1018:	7a a9       	ldd	r23, Y+50	; 0x32
    101a:	8b a9       	ldd	r24, Y+51	; 0x33
    101c:	9c a9       	ldd	r25, Y+52	; 0x34
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	3f ef       	ldi	r19, 0xFF	; 255
    1022:	4f e7       	ldi	r20, 0x7F	; 127
    1024:	57 e4       	ldi	r21, 0x47	; 71
    1026:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    102a:	18 16       	cp	r1, r24
    102c:	4c f5       	brge	.+82     	; 0x1080 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102e:	6d a9       	ldd	r22, Y+53	; 0x35
    1030:	7e a9       	ldd	r23, Y+54	; 0x36
    1032:	8f a9       	ldd	r24, Y+55	; 0x37
    1034:	98 ad       	ldd	r25, Y+56	; 0x38
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e2       	ldi	r20, 0x20	; 32
    103c:	51 e4       	ldi	r21, 0x41	; 65
    103e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	bc 01       	movw	r22, r24
    1048:	cd 01       	movw	r24, r26
    104a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	98 ab       	std	Y+48, r25	; 0x30
    1054:	8f a7       	std	Y+47, r24	; 0x2f
    1056:	0f c0       	rjmp	.+30     	; 0x1076 <LCD_sendCommand+0x4fe>
    1058:	89 e1       	ldi	r24, 0x19	; 25
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	9e a7       	std	Y+46, r25	; 0x2e
    105e:	8d a7       	std	Y+45, r24	; 0x2d
    1060:	8d a5       	ldd	r24, Y+45	; 0x2d
    1062:	9e a5       	ldd	r25, Y+46	; 0x2e
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <LCD_sendCommand+0x4ec>
    1068:	9e a7       	std	Y+46, r25	; 0x2e
    106a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    106c:	8f a5       	ldd	r24, Y+47	; 0x2f
    106e:	98 a9       	ldd	r25, Y+48	; 0x30
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	98 ab       	std	Y+48, r25	; 0x30
    1074:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1076:	8f a5       	ldd	r24, Y+47	; 0x2f
    1078:	98 a9       	ldd	r25, Y+48	; 0x30
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	69 f7       	brne	.-38     	; 0x1058 <LCD_sendCommand+0x4e0>
    107e:	14 c0       	rjmp	.+40     	; 0x10a8 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1080:	69 a9       	ldd	r22, Y+49	; 0x31
    1082:	7a a9       	ldd	r23, Y+50	; 0x32
    1084:	8b a9       	ldd	r24, Y+51	; 0x33
    1086:	9c a9       	ldd	r25, Y+52	; 0x34
    1088:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	98 ab       	std	Y+48, r25	; 0x30
    1092:	8f a7       	std	Y+47, r24	; 0x2f
    1094:	8f a5       	ldd	r24, Y+47	; 0x2f
    1096:	98 a9       	ldd	r25, Y+48	; 0x30
    1098:	9c a7       	std	Y+44, r25	; 0x2c
    109a:	8b a7       	std	Y+43, r24	; 0x2b
    109c:	8b a5       	ldd	r24, Y+43	; 0x2b
    109e:	9c a5       	ldd	r25, Y+44	; 0x2c
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <LCD_sendCommand+0x528>
    10a4:	9c a7       	std	Y+44, r25	; 0x2c
    10a6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/*start enabling again*/

		/* Enable =1 */
		Pin_output(CTRL_OUTPUT_PINS  ,E);
    10a8:	a8 e3       	ldi	r26, 0x38	; 56
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e8 e3       	ldi	r30, 0x38	; 56
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	88 60       	ori	r24, 0x08	; 8
    10b4:	8c 93       	st	X, r24
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	a0 e8       	ldi	r26, 0x80	; 128
    10bc:	bf e3       	ldi	r27, 0x3F	; 63
    10be:	8f a3       	std	Y+39, r24	; 0x27
    10c0:	98 a7       	std	Y+40, r25	; 0x28
    10c2:	a9 a7       	std	Y+41, r26	; 0x29
    10c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c6:	6f a1       	ldd	r22, Y+39	; 0x27
    10c8:	78 a5       	ldd	r23, Y+40	; 0x28
    10ca:	89 a5       	ldd	r24, Y+41	; 0x29
    10cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	4a e7       	ldi	r20, 0x7A	; 122
    10d4:	53 e4       	ldi	r21, 0x43	; 67
    10d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	8b a3       	std	Y+35, r24	; 0x23
    10e0:	9c a3       	std	Y+36, r25	; 0x24
    10e2:	ad a3       	std	Y+37, r26	; 0x25
    10e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10e6:	6b a1       	ldd	r22, Y+35	; 0x23
    10e8:	7c a1       	ldd	r23, Y+36	; 0x24
    10ea:	8d a1       	ldd	r24, Y+37	; 0x25
    10ec:	9e a1       	ldd	r25, Y+38	; 0x26
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e8       	ldi	r20, 0x80	; 128
    10f4:	5f e3       	ldi	r21, 0x3F	; 63
    10f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10fa:	88 23       	and	r24, r24
    10fc:	2c f4       	brge	.+10     	; 0x1108 <LCD_sendCommand+0x590>
		__ticks = 1;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9a a3       	std	Y+34, r25	; 0x22
    1104:	89 a3       	std	Y+33, r24	; 0x21
    1106:	3f c0       	rjmp	.+126    	; 0x1186 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1108:	6b a1       	ldd	r22, Y+35	; 0x23
    110a:	7c a1       	ldd	r23, Y+36	; 0x24
    110c:	8d a1       	ldd	r24, Y+37	; 0x25
    110e:	9e a1       	ldd	r25, Y+38	; 0x26
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	3f ef       	ldi	r19, 0xFF	; 255
    1114:	4f e7       	ldi	r20, 0x7F	; 127
    1116:	57 e4       	ldi	r21, 0x47	; 71
    1118:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    111c:	18 16       	cp	r1, r24
    111e:	4c f5       	brge	.+82     	; 0x1172 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1120:	6f a1       	ldd	r22, Y+39	; 0x27
    1122:	78 a5       	ldd	r23, Y+40	; 0x28
    1124:	89 a5       	ldd	r24, Y+41	; 0x29
    1126:	9a a5       	ldd	r25, Y+42	; 0x2a
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	40 e2       	ldi	r20, 0x20	; 32
    112e:	51 e4       	ldi	r21, 0x41	; 65
    1130:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	bc 01       	movw	r22, r24
    113a:	cd 01       	movw	r24, r26
    113c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	9a a3       	std	Y+34, r25	; 0x22
    1146:	89 a3       	std	Y+33, r24	; 0x21
    1148:	0f c0       	rjmp	.+30     	; 0x1168 <LCD_sendCommand+0x5f0>
    114a:	89 e1       	ldi	r24, 0x19	; 25
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	98 a3       	std	Y+32, r25	; 0x20
    1150:	8f 8f       	std	Y+31, r24	; 0x1f
    1152:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1154:	98 a1       	ldd	r25, Y+32	; 0x20
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <LCD_sendCommand+0x5de>
    115a:	98 a3       	std	Y+32, r25	; 0x20
    115c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115e:	89 a1       	ldd	r24, Y+33	; 0x21
    1160:	9a a1       	ldd	r25, Y+34	; 0x22
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	9a a3       	std	Y+34, r25	; 0x22
    1166:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1168:	89 a1       	ldd	r24, Y+33	; 0x21
    116a:	9a a1       	ldd	r25, Y+34	; 0x22
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	69 f7       	brne	.-38     	; 0x114a <LCD_sendCommand+0x5d2>
    1170:	14 c0       	rjmp	.+40     	; 0x119a <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1172:	6b a1       	ldd	r22, Y+35	; 0x23
    1174:	7c a1       	ldd	r23, Y+36	; 0x24
    1176:	8d a1       	ldd	r24, Y+37	; 0x25
    1178:	9e a1       	ldd	r25, Y+38	; 0x26
    117a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	9a a3       	std	Y+34, r25	; 0x22
    1184:	89 a3       	std	Y+33, r24	; 0x21
    1186:	89 a1       	ldd	r24, Y+33	; 0x21
    1188:	9a a1       	ldd	r25, Y+34	; 0x22
    118a:	9e 8f       	std	Y+30, r25	; 0x1e
    118c:	8d 8f       	std	Y+29, r24	; 0x1d
    118e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1190:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <LCD_sendCommand+0x61a>
    1196:	9e 8f       	std	Y+30, r25	; 0x1e
    1198:	8d 8f       	std	Y+29, r24	; 0x1d
		    TAKE_SCCOMMAND(DATA_OUTPUT_PINS,command);
     #else

	        /*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS&0x0F)|((command&0x0F)<<4);*/

	        TAKE_SCCOMMAND(DATA_OUTPUT_PINS,command);
    119a:	ab e3       	ldi	r26, 0x3B	; 59
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	eb e3       	ldi	r30, 0x3B	; 59
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	28 2f       	mov	r18, r24
    11a6:	2f 70       	andi	r18, 0x0F	; 15
    11a8:	fe 01       	movw	r30, r28
    11aa:	ed 59       	subi	r30, 0x9D	; 157
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	80 81       	ld	r24, Z
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	82 95       	swap	r24
    11b6:	92 95       	swap	r25
    11b8:	90 7f       	andi	r25, 0xF0	; 240
    11ba:	98 27       	eor	r25, r24
    11bc:	80 7f       	andi	r24, 0xF0	; 240
    11be:	98 27       	eor	r25, r24
    11c0:	82 2b       	or	r24, r18
    11c2:	8c 93       	st	X, r24
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a0 e8       	ldi	r26, 0x80	; 128
    11ca:	bf e3       	ldi	r27, 0x3F	; 63
    11cc:	89 8f       	std	Y+25, r24	; 0x19
    11ce:	9a 8f       	std	Y+26, r25	; 0x1a
    11d0:	ab 8f       	std	Y+27, r26	; 0x1b
    11d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d4:	69 8d       	ldd	r22, Y+25	; 0x19
    11d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	4a e7       	ldi	r20, 0x7A	; 122
    11e2:	53 e4       	ldi	r21, 0x43	; 67
    11e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	8d 8b       	std	Y+21, r24	; 0x15
    11ee:	9e 8b       	std	Y+22, r25	; 0x16
    11f0:	af 8b       	std	Y+23, r26	; 0x17
    11f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11f4:	6d 89       	ldd	r22, Y+21	; 0x15
    11f6:	7e 89       	ldd	r23, Y+22	; 0x16
    11f8:	8f 89       	ldd	r24, Y+23	; 0x17
    11fa:	98 8d       	ldd	r25, Y+24	; 0x18
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e8       	ldi	r20, 0x80	; 128
    1202:	5f e3       	ldi	r21, 0x3F	; 63
    1204:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1208:	88 23       	and	r24, r24
    120a:	2c f4       	brge	.+10     	; 0x1216 <LCD_sendCommand+0x69e>
		__ticks = 1;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	9c 8b       	std	Y+20, r25	; 0x14
    1212:	8b 8b       	std	Y+19, r24	; 0x13
    1214:	3f c0       	rjmp	.+126    	; 0x1294 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1216:	6d 89       	ldd	r22, Y+21	; 0x15
    1218:	7e 89       	ldd	r23, Y+22	; 0x16
    121a:	8f 89       	ldd	r24, Y+23	; 0x17
    121c:	98 8d       	ldd	r25, Y+24	; 0x18
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	3f ef       	ldi	r19, 0xFF	; 255
    1222:	4f e7       	ldi	r20, 0x7F	; 127
    1224:	57 e4       	ldi	r21, 0x47	; 71
    1226:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    122a:	18 16       	cp	r1, r24
    122c:	4c f5       	brge	.+82     	; 0x1280 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    122e:	69 8d       	ldd	r22, Y+25	; 0x19
    1230:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1232:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1234:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e2       	ldi	r20, 0x20	; 32
    123c:	51 e4       	ldi	r21, 0x41	; 65
    123e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	bc 01       	movw	r22, r24
    1248:	cd 01       	movw	r24, r26
    124a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	9c 8b       	std	Y+20, r25	; 0x14
    1254:	8b 8b       	std	Y+19, r24	; 0x13
    1256:	0f c0       	rjmp	.+30     	; 0x1276 <LCD_sendCommand+0x6fe>
    1258:	89 e1       	ldi	r24, 0x19	; 25
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	9a 8b       	std	Y+18, r25	; 0x12
    125e:	89 8b       	std	Y+17, r24	; 0x11
    1260:	89 89       	ldd	r24, Y+17	; 0x11
    1262:	9a 89       	ldd	r25, Y+18	; 0x12
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	f1 f7       	brne	.-4      	; 0x1264 <LCD_sendCommand+0x6ec>
    1268:	9a 8b       	std	Y+18, r25	; 0x12
    126a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126c:	8b 89       	ldd	r24, Y+19	; 0x13
    126e:	9c 89       	ldd	r25, Y+20	; 0x14
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	9c 8b       	std	Y+20, r25	; 0x14
    1274:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1276:	8b 89       	ldd	r24, Y+19	; 0x13
    1278:	9c 89       	ldd	r25, Y+20	; 0x14
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	69 f7       	brne	.-38     	; 0x1258 <LCD_sendCommand+0x6e0>
    127e:	14 c0       	rjmp	.+40     	; 0x12a8 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1280:	6d 89       	ldd	r22, Y+21	; 0x15
    1282:	7e 89       	ldd	r23, Y+22	; 0x16
    1284:	8f 89       	ldd	r24, Y+23	; 0x17
    1286:	98 8d       	ldd	r25, Y+24	; 0x18
    1288:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	9c 8b       	std	Y+20, r25	; 0x14
    1292:	8b 8b       	std	Y+19, r24	; 0x13
    1294:	8b 89       	ldd	r24, Y+19	; 0x13
    1296:	9c 89       	ldd	r25, Y+20	; 0x14
    1298:	98 8b       	std	Y+16, r25	; 0x10
    129a:	8f 87       	std	Y+15, r24	; 0x0f
    129c:	8f 85       	ldd	r24, Y+15	; 0x0f
    129e:	98 89       	ldd	r25, Y+16	; 0x10
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <LCD_sendCommand+0x728>
    12a4:	98 8b       	std	Y+16, r25	; 0x10
    12a6:	8f 87       	std	Y+15, r24	; 0x0f

#endif
	        /*wait tdpw to make enable =0 */
	        	_delay_ms(1);
	        	/* make enable =0*/
	        	Pin_clear(CTRL_OUTPUT_PINS,E);
    12a8:	a8 e3       	ldi	r26, 0x38	; 56
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e8 e3       	ldi	r30, 0x38	; 56
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	87 7f       	andi	r24, 0xF7	; 247
    12b4:	8c 93       	st	X, r24
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a0 e8       	ldi	r26, 0x80	; 128
    12bc:	bf e3       	ldi	r27, 0x3F	; 63
    12be:	8b 87       	std	Y+11, r24	; 0x0b
    12c0:	9c 87       	std	Y+12, r25	; 0x0c
    12c2:	ad 87       	std	Y+13, r26	; 0x0d
    12c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    12cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	4a e7       	ldi	r20, 0x7A	; 122
    12d4:	53 e4       	ldi	r21, 0x43	; 67
    12d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	8f 83       	std	Y+7, r24	; 0x07
    12e0:	98 87       	std	Y+8, r25	; 0x08
    12e2:	a9 87       	std	Y+9, r26	; 0x09
    12e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12e6:	6f 81       	ldd	r22, Y+7	; 0x07
    12e8:	78 85       	ldd	r23, Y+8	; 0x08
    12ea:	89 85       	ldd	r24, Y+9	; 0x09
    12ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e8       	ldi	r20, 0x80	; 128
    12f4:	5f e3       	ldi	r21, 0x3F	; 63
    12f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12fa:	88 23       	and	r24, r24
    12fc:	2c f4       	brge	.+10     	; 0x1308 <LCD_sendCommand+0x790>
		__ticks = 1;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	8d 83       	std	Y+5, r24	; 0x05
    1306:	3f c0       	rjmp	.+126    	; 0x1386 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    1308:	6f 81       	ldd	r22, Y+7	; 0x07
    130a:	78 85       	ldd	r23, Y+8	; 0x08
    130c:	89 85       	ldd	r24, Y+9	; 0x09
    130e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	3f ef       	ldi	r19, 0xFF	; 255
    1314:	4f e7       	ldi	r20, 0x7F	; 127
    1316:	57 e4       	ldi	r21, 0x47	; 71
    1318:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    131c:	18 16       	cp	r1, r24
    131e:	4c f5       	brge	.+82     	; 0x1372 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1320:	6b 85       	ldd	r22, Y+11	; 0x0b
    1322:	7c 85       	ldd	r23, Y+12	; 0x0c
    1324:	8d 85       	ldd	r24, Y+13	; 0x0d
    1326:	9e 85       	ldd	r25, Y+14	; 0x0e
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e2       	ldi	r20, 0x20	; 32
    132e:	51 e4       	ldi	r21, 0x41	; 65
    1330:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
    1348:	0f c0       	rjmp	.+30     	; 0x1368 <LCD_sendCommand+0x7f0>
    134a:	89 e1       	ldi	r24, 0x19	; 25
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	9c 83       	std	Y+4, r25	; 0x04
    1350:	8b 83       	std	Y+3, r24	; 0x03
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <LCD_sendCommand+0x7de>
    135a:	9c 83       	std	Y+4, r25	; 0x04
    135c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	69 f7       	brne	.-38     	; 0x134a <LCD_sendCommand+0x7d2>
    1370:	14 c0       	rjmp	.+40     	; 0x139a <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1372:	6f 81       	ldd	r22, Y+7	; 0x07
    1374:	78 85       	ldd	r23, Y+8	; 0x08
    1376:	89 85       	ldd	r24, Y+9	; 0x09
    1378:	9a 85       	ldd	r25, Y+10	; 0x0a
    137a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	9e 83       	std	Y+6, r25	; 0x06
    1384:	8d 83       	std	Y+5, r24	; 0x05
    1386:	8d 81       	ldd	r24, Y+5	; 0x05
    1388:	9e 81       	ldd	r25, Y+6	; 0x06
    138a:	9a 83       	std	Y+2, r25	; 0x02
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	9a 81       	ldd	r25, Y+2	; 0x02
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	f1 f7       	brne	.-4      	; 0x1392 <LCD_sendCommand+0x81a>
    1396:	9a 83       	std	Y+2, r25	; 0x02
    1398:	89 83       	std	Y+1, r24	; 0x01
	        	/*wait th 13ns */
	        	_delay_ms(1);


}
    139a:	cd 59       	subi	r28, 0x9D	; 157
    139c:	df 4f       	sbci	r29, 0xFF	; 255
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	08 95       	ret

000013b2 <LCD_displayChar>:
#endif




  void LCD_displayChar(unit8 data){
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	c3 56       	subi	r28, 0x63	; 99
    13c0:	d0 40       	sbci	r29, 0x00	; 0
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	fe 01       	movw	r30, r28
    13ce:	ed 59       	subi	r30, 0x9D	; 157
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 83       	st	Z, r24
	/*make RS=1 to send data*/
	Pin_output(CTRL_OUTPUT_PINS  ,RS);
    13d4:	a8 e3       	ldi	r26, 0x38	; 56
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e8 e3       	ldi	r30, 0x38	; 56
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	82 60       	ori	r24, 0x02	; 2
    13e0:	8c 93       	st	X, r24
	/*make RW=0 to write command*/
	Pin_clear(CTRL_OUTPUT_PINS  ,RW);
    13e2:	a8 e3       	ldi	r26, 0x38	; 56
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e8 e3       	ldi	r30, 0x38	; 56
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	8b 7f       	andi	r24, 0xFB	; 251
    13ee:	8c 93       	st	X, r24
    13f0:	fe 01       	movw	r30, r28
    13f2:	e1 5a       	subi	r30, 0xA1	; 161
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a0 e8       	ldi	r26, 0x80	; 128
    13fc:	bf e3       	ldi	r27, 0x3F	; 63
    13fe:	80 83       	st	Z, r24
    1400:	91 83       	std	Z+1, r25	; 0x01
    1402:	a2 83       	std	Z+2, r26	; 0x02
    1404:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1406:	8e 01       	movw	r16, r28
    1408:	05 5a       	subi	r16, 0xA5	; 165
    140a:	1f 4f       	sbci	r17, 0xFF	; 255
    140c:	fe 01       	movw	r30, r28
    140e:	e1 5a       	subi	r30, 0xA1	; 161
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	60 81       	ld	r22, Z
    1414:	71 81       	ldd	r23, Z+1	; 0x01
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	93 81       	ldd	r25, Z+3	; 0x03
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	4a e7       	ldi	r20, 0x7A	; 122
    1420:	53 e4       	ldi	r21, 0x43	; 67
    1422:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	f8 01       	movw	r30, r16
    142c:	80 83       	st	Z, r24
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	a2 83       	std	Z+2, r26	; 0x02
    1432:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1434:	fe 01       	movw	r30, r28
    1436:	e5 5a       	subi	r30, 0xA5	; 165
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	60 81       	ld	r22, Z
    143c:	71 81       	ldd	r23, Z+1	; 0x01
    143e:	82 81       	ldd	r24, Z+2	; 0x02
    1440:	93 81       	ldd	r25, Z+3	; 0x03
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e8       	ldi	r20, 0x80	; 128
    1448:	5f e3       	ldi	r21, 0x3F	; 63
    144a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    144e:	88 23       	and	r24, r24
    1450:	44 f4       	brge	.+16     	; 0x1462 <LCD_displayChar+0xb0>
		__ticks = 1;
    1452:	fe 01       	movw	r30, r28
    1454:	e7 5a       	subi	r30, 0xA7	; 167
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	91 83       	std	Z+1, r25	; 0x01
    145e:	80 83       	st	Z, r24
    1460:	64 c0       	rjmp	.+200    	; 0x152a <LCD_displayChar+0x178>
	else if (__tmp > 65535)
    1462:	fe 01       	movw	r30, r28
    1464:	e5 5a       	subi	r30, 0xA5	; 165
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	60 81       	ld	r22, Z
    146a:	71 81       	ldd	r23, Z+1	; 0x01
    146c:	82 81       	ldd	r24, Z+2	; 0x02
    146e:	93 81       	ldd	r25, Z+3	; 0x03
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	3f ef       	ldi	r19, 0xFF	; 255
    1474:	4f e7       	ldi	r20, 0x7F	; 127
    1476:	57 e4       	ldi	r21, 0x47	; 71
    1478:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    147c:	18 16       	cp	r1, r24
    147e:	0c f0       	brlt	.+2      	; 0x1482 <LCD_displayChar+0xd0>
    1480:	43 c0       	rjmp	.+134    	; 0x1508 <LCD_displayChar+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1482:	fe 01       	movw	r30, r28
    1484:	e1 5a       	subi	r30, 0xA1	; 161
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	60 81       	ld	r22, Z
    148a:	71 81       	ldd	r23, Z+1	; 0x01
    148c:	82 81       	ldd	r24, Z+2	; 0x02
    148e:	93 81       	ldd	r25, Z+3	; 0x03
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e2       	ldi	r20, 0x20	; 32
    1496:	51 e4       	ldi	r21, 0x41	; 65
    1498:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	8e 01       	movw	r16, r28
    14a2:	07 5a       	subi	r16, 0xA7	; 167
    14a4:	1f 4f       	sbci	r17, 0xFF	; 255
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	f8 01       	movw	r30, r16
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	80 83       	st	Z, r24
    14b8:	1f c0       	rjmp	.+62     	; 0x14f8 <LCD_displayChar+0x146>
    14ba:	fe 01       	movw	r30, r28
    14bc:	e9 5a       	subi	r30, 0xA9	; 169
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	89 e1       	ldi	r24, 0x19	; 25
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	91 83       	std	Z+1, r25	; 0x01
    14c6:	80 83       	st	Z, r24
    14c8:	fe 01       	movw	r30, r28
    14ca:	e9 5a       	subi	r30, 0xA9	; 169
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	80 81       	ld	r24, Z
    14d0:	91 81       	ldd	r25, Z+1	; 0x01
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	f1 f7       	brne	.-4      	; 0x14d2 <LCD_displayChar+0x120>
    14d6:	fe 01       	movw	r30, r28
    14d8:	e9 5a       	subi	r30, 0xA9	; 169
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e0:	de 01       	movw	r26, r28
    14e2:	a7 5a       	subi	r26, 0xA7	; 167
    14e4:	bf 4f       	sbci	r27, 0xFF	; 255
    14e6:	fe 01       	movw	r30, r28
    14e8:	e7 5a       	subi	r30, 0xA7	; 167
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 81       	ld	r24, Z
    14ee:	91 81       	ldd	r25, Z+1	; 0x01
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	11 96       	adiw	r26, 0x01	; 1
    14f4:	9c 93       	st	X, r25
    14f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f8:	fe 01       	movw	r30, r28
    14fa:	e7 5a       	subi	r30, 0xA7	; 167
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	80 81       	ld	r24, Z
    1500:	91 81       	ldd	r25, Z+1	; 0x01
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	d1 f6       	brne	.-76     	; 0x14ba <LCD_displayChar+0x108>
    1506:	27 c0       	rjmp	.+78     	; 0x1556 <LCD_displayChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1508:	8e 01       	movw	r16, r28
    150a:	07 5a       	subi	r16, 0xA7	; 167
    150c:	1f 4f       	sbci	r17, 0xFF	; 255
    150e:	fe 01       	movw	r30, r28
    1510:	e5 5a       	subi	r30, 0xA5	; 165
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	60 81       	ld	r22, Z
    1516:	71 81       	ldd	r23, Z+1	; 0x01
    1518:	82 81       	ldd	r24, Z+2	; 0x02
    151a:	93 81       	ldd	r25, Z+3	; 0x03
    151c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	f8 01       	movw	r30, r16
    1526:	91 83       	std	Z+1, r25	; 0x01
    1528:	80 83       	st	Z, r24
    152a:	de 01       	movw	r26, r28
    152c:	ab 5a       	subi	r26, 0xAB	; 171
    152e:	bf 4f       	sbci	r27, 0xFF	; 255
    1530:	fe 01       	movw	r30, r28
    1532:	e7 5a       	subi	r30, 0xA7	; 167
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	80 81       	ld	r24, Z
    1538:	91 81       	ldd	r25, Z+1	; 0x01
    153a:	8d 93       	st	X+, r24
    153c:	9c 93       	st	X, r25
    153e:	fe 01       	movw	r30, r28
    1540:	eb 5a       	subi	r30, 0xAB	; 171
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	80 81       	ld	r24, Z
    1546:	91 81       	ldd	r25, Z+1	; 0x01
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	f1 f7       	brne	.-4      	; 0x1548 <LCD_displayChar+0x196>
    154c:	fe 01       	movw	r30, r28
    154e:	eb 5a       	subi	r30, 0xAB	; 171
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	80 83       	st	Z, r24
	/*wait tas before enabling 50ns */
	_delay_ms(1);
	/* Enable =1 */
	Pin_output(CTRL_OUTPUT_PINS  ,E);
    1556:	a8 e3       	ldi	r26, 0x38	; 56
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e8 e3       	ldi	r30, 0x38	; 56
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	88 60       	ori	r24, 0x08	; 8
    1562:	8c 93       	st	X, r24
    1564:	fe 01       	movw	r30, r28
    1566:	ef 5a       	subi	r30, 0xAF	; 175
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	a0 e8       	ldi	r26, 0x80	; 128
    1570:	bf e3       	ldi	r27, 0x3F	; 63
    1572:	80 83       	st	Z, r24
    1574:	91 83       	std	Z+1, r25	; 0x01
    1576:	a2 83       	std	Z+2, r26	; 0x02
    1578:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157a:	8e 01       	movw	r16, r28
    157c:	03 5b       	subi	r16, 0xB3	; 179
    157e:	1f 4f       	sbci	r17, 0xFF	; 255
    1580:	fe 01       	movw	r30, r28
    1582:	ef 5a       	subi	r30, 0xAF	; 175
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	60 81       	ld	r22, Z
    1588:	71 81       	ldd	r23, Z+1	; 0x01
    158a:	82 81       	ldd	r24, Z+2	; 0x02
    158c:	93 81       	ldd	r25, Z+3	; 0x03
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	4a e7       	ldi	r20, 0x7A	; 122
    1594:	53 e4       	ldi	r21, 0x43	; 67
    1596:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	f8 01       	movw	r30, r16
    15a0:	80 83       	st	Z, r24
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	a2 83       	std	Z+2, r26	; 0x02
    15a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15a8:	fe 01       	movw	r30, r28
    15aa:	e3 5b       	subi	r30, 0xB3	; 179
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	60 81       	ld	r22, Z
    15b0:	71 81       	ldd	r23, Z+1	; 0x01
    15b2:	82 81       	ldd	r24, Z+2	; 0x02
    15b4:	93 81       	ldd	r25, Z+3	; 0x03
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e8       	ldi	r20, 0x80	; 128
    15bc:	5f e3       	ldi	r21, 0x3F	; 63
    15be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15c2:	88 23       	and	r24, r24
    15c4:	44 f4       	brge	.+16     	; 0x15d6 <LCD_displayChar+0x224>
		__ticks = 1;
    15c6:	fe 01       	movw	r30, r28
    15c8:	e5 5b       	subi	r30, 0xB5	; 181
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	80 83       	st	Z, r24
    15d4:	64 c0       	rjmp	.+200    	; 0x169e <LCD_displayChar+0x2ec>
	else if (__tmp > 65535)
    15d6:	fe 01       	movw	r30, r28
    15d8:	e3 5b       	subi	r30, 0xB3	; 179
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	60 81       	ld	r22, Z
    15de:	71 81       	ldd	r23, Z+1	; 0x01
    15e0:	82 81       	ldd	r24, Z+2	; 0x02
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	3f ef       	ldi	r19, 0xFF	; 255
    15e8:	4f e7       	ldi	r20, 0x7F	; 127
    15ea:	57 e4       	ldi	r21, 0x47	; 71
    15ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15f0:	18 16       	cp	r1, r24
    15f2:	0c f0       	brlt	.+2      	; 0x15f6 <LCD_displayChar+0x244>
    15f4:	43 c0       	rjmp	.+134    	; 0x167c <LCD_displayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f6:	fe 01       	movw	r30, r28
    15f8:	ef 5a       	subi	r30, 0xAF	; 175
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	60 81       	ld	r22, Z
    15fe:	71 81       	ldd	r23, Z+1	; 0x01
    1600:	82 81       	ldd	r24, Z+2	; 0x02
    1602:	93 81       	ldd	r25, Z+3	; 0x03
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e2       	ldi	r20, 0x20	; 32
    160a:	51 e4       	ldi	r21, 0x41	; 65
    160c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	8e 01       	movw	r16, r28
    1616:	05 5b       	subi	r16, 0xB5	; 181
    1618:	1f 4f       	sbci	r17, 0xFF	; 255
    161a:	bc 01       	movw	r22, r24
    161c:	cd 01       	movw	r24, r26
    161e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	f8 01       	movw	r30, r16
    1628:	91 83       	std	Z+1, r25	; 0x01
    162a:	80 83       	st	Z, r24
    162c:	1f c0       	rjmp	.+62     	; 0x166c <LCD_displayChar+0x2ba>
    162e:	fe 01       	movw	r30, r28
    1630:	e7 5b       	subi	r30, 0xB7	; 183
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	89 e1       	ldi	r24, 0x19	; 25
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	91 83       	std	Z+1, r25	; 0x01
    163a:	80 83       	st	Z, r24
    163c:	fe 01       	movw	r30, r28
    163e:	e7 5b       	subi	r30, 0xB7	; 183
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <LCD_displayChar+0x294>
    164a:	fe 01       	movw	r30, r28
    164c:	e7 5b       	subi	r30, 0xB7	; 183
    164e:	ff 4f       	sbci	r31, 0xFF	; 255
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1654:	de 01       	movw	r26, r28
    1656:	a5 5b       	subi	r26, 0xB5	; 181
    1658:	bf 4f       	sbci	r27, 0xFF	; 255
    165a:	fe 01       	movw	r30, r28
    165c:	e5 5b       	subi	r30, 0xB5	; 181
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	80 81       	ld	r24, Z
    1662:	91 81       	ldd	r25, Z+1	; 0x01
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	11 96       	adiw	r26, 0x01	; 1
    1668:	9c 93       	st	X, r25
    166a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166c:	fe 01       	movw	r30, r28
    166e:	e5 5b       	subi	r30, 0xB5	; 181
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	80 81       	ld	r24, Z
    1674:	91 81       	ldd	r25, Z+1	; 0x01
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	d1 f6       	brne	.-76     	; 0x162e <LCD_displayChar+0x27c>
    167a:	27 c0       	rjmp	.+78     	; 0x16ca <LCD_displayChar+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167c:	8e 01       	movw	r16, r28
    167e:	05 5b       	subi	r16, 0xB5	; 181
    1680:	1f 4f       	sbci	r17, 0xFF	; 255
    1682:	fe 01       	movw	r30, r28
    1684:	e3 5b       	subi	r30, 0xB3	; 179
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	82 81       	ldd	r24, Z+2	; 0x02
    168e:	93 81       	ldd	r25, Z+3	; 0x03
    1690:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	f8 01       	movw	r30, r16
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	80 83       	st	Z, r24
    169e:	de 01       	movw	r26, r28
    16a0:	a9 5b       	subi	r26, 0xB9	; 185
    16a2:	bf 4f       	sbci	r27, 0xFF	; 255
    16a4:	fe 01       	movw	r30, r28
    16a6:	e5 5b       	subi	r30, 0xB5	; 181
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	80 81       	ld	r24, Z
    16ac:	91 81       	ldd	r25, Z+1	; 0x01
    16ae:	8d 93       	st	X+, r24
    16b0:	9c 93       	st	X, r25
    16b2:	fe 01       	movw	r30, r28
    16b4:	e9 5b       	subi	r30, 0xB9	; 185
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	80 81       	ld	r24, Z
    16ba:	91 81       	ldd	r25, Z+1	; 0x01
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <LCD_displayChar+0x30a>
    16c0:	fe 01       	movw	r30, r28
    16c2:	e9 5b       	subi	r30, 0xB9	; 185
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	91 83       	std	Z+1, r25	; 0x01
    16c8:	80 83       	st	Z, r24

	   	TAKE_FTCOMMAND(DATA_OUTPUT_PINS,data);

     #else
		/*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS & 0x0F) | (data & 0xF0);*/
		TAKE_FTCOMMAND(DATA_OUTPUT_PINS,data);
    16ca:	ab e3       	ldi	r26, 0x3B	; 59
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	eb e3       	ldi	r30, 0x3B	; 59
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	98 2f       	mov	r25, r24
    16d6:	9f 70       	andi	r25, 0x0F	; 15
    16d8:	fe 01       	movw	r30, r28
    16da:	ed 59       	subi	r30, 0x9D	; 157
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	80 81       	ld	r24, Z
    16e0:	80 7f       	andi	r24, 0xF0	; 240
    16e2:	89 2b       	or	r24, r25
    16e4:	8c 93       	st	X, r24
    16e6:	fe 01       	movw	r30, r28
    16e8:	ed 5b       	subi	r30, 0xBD	; 189
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	a0 e8       	ldi	r26, 0x80	; 128
    16f2:	bf e3       	ldi	r27, 0x3F	; 63
    16f4:	80 83       	st	Z, r24
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	a2 83       	std	Z+2, r26	; 0x02
    16fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fc:	8e 01       	movw	r16, r28
    16fe:	01 5c       	subi	r16, 0xC1	; 193
    1700:	1f 4f       	sbci	r17, 0xFF	; 255
    1702:	fe 01       	movw	r30, r28
    1704:	ed 5b       	subi	r30, 0xBD	; 189
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	60 81       	ld	r22, Z
    170a:	71 81       	ldd	r23, Z+1	; 0x01
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	4a e7       	ldi	r20, 0x7A	; 122
    1716:	53 e4       	ldi	r21, 0x43	; 67
    1718:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	f8 01       	movw	r30, r16
    1722:	80 83       	st	Z, r24
    1724:	91 83       	std	Z+1, r25	; 0x01
    1726:	a2 83       	std	Z+2, r26	; 0x02
    1728:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    172a:	fe 01       	movw	r30, r28
    172c:	ff 96       	adiw	r30, 0x3f	; 63
    172e:	60 81       	ld	r22, Z
    1730:	71 81       	ldd	r23, Z+1	; 0x01
    1732:	82 81       	ldd	r24, Z+2	; 0x02
    1734:	93 81       	ldd	r25, Z+3	; 0x03
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e8       	ldi	r20, 0x80	; 128
    173c:	5f e3       	ldi	r21, 0x3F	; 63
    173e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1742:	88 23       	and	r24, r24
    1744:	2c f4       	brge	.+10     	; 0x1750 <LCD_displayChar+0x39e>
		__ticks = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	9e af       	std	Y+62, r25	; 0x3e
    174c:	8d af       	std	Y+61, r24	; 0x3d
    174e:	46 c0       	rjmp	.+140    	; 0x17dc <LCD_displayChar+0x42a>
	else if (__tmp > 65535)
    1750:	fe 01       	movw	r30, r28
    1752:	ff 96       	adiw	r30, 0x3f	; 63
    1754:	60 81       	ld	r22, Z
    1756:	71 81       	ldd	r23, Z+1	; 0x01
    1758:	82 81       	ldd	r24, Z+2	; 0x02
    175a:	93 81       	ldd	r25, Z+3	; 0x03
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	57 e4       	ldi	r21, 0x47	; 71
    1764:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1768:	18 16       	cp	r1, r24
    176a:	64 f5       	brge	.+88     	; 0x17c4 <LCD_displayChar+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176c:	fe 01       	movw	r30, r28
    176e:	ed 5b       	subi	r30, 0xBD	; 189
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e2       	ldi	r20, 0x20	; 32
    1780:	51 e4       	ldi	r21, 0x41	; 65
    1782:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9e af       	std	Y+62, r25	; 0x3e
    1798:	8d af       	std	Y+61, r24	; 0x3d
    179a:	0f c0       	rjmp	.+30     	; 0x17ba <LCD_displayChar+0x408>
    179c:	89 e1       	ldi	r24, 0x19	; 25
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	9c af       	std	Y+60, r25	; 0x3c
    17a2:	8b af       	std	Y+59, r24	; 0x3b
    17a4:	8b ad       	ldd	r24, Y+59	; 0x3b
    17a6:	9c ad       	ldd	r25, Y+60	; 0x3c
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <LCD_displayChar+0x3f6>
    17ac:	9c af       	std	Y+60, r25	; 0x3c
    17ae:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    17b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	9e af       	std	Y+62, r25	; 0x3e
    17b8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    17bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	69 f7       	brne	.-38     	; 0x179c <LCD_displayChar+0x3ea>
    17c2:	16 c0       	rjmp	.+44     	; 0x17f0 <LCD_displayChar+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c4:	fe 01       	movw	r30, r28
    17c6:	ff 96       	adiw	r30, 0x3f	; 63
    17c8:	60 81       	ld	r22, Z
    17ca:	71 81       	ldd	r23, Z+1	; 0x01
    17cc:	82 81       	ldd	r24, Z+2	; 0x02
    17ce:	93 81       	ldd	r25, Z+3	; 0x03
    17d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	9e af       	std	Y+62, r25	; 0x3e
    17da:	8d af       	std	Y+61, r24	; 0x3d
    17dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    17de:	9e ad       	ldd	r25, Y+62	; 0x3e
    17e0:	9a af       	std	Y+58, r25	; 0x3a
    17e2:	89 af       	std	Y+57, r24	; 0x39
    17e4:	89 ad       	ldd	r24, Y+57	; 0x39
    17e6:	9a ad       	ldd	r25, Y+58	; 0x3a
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <LCD_displayChar+0x436>
    17ec:	9a af       	std	Y+58, r25	; 0x3a
    17ee:	89 af       	std	Y+57, r24	; 0x39
     #endif

	/*wait tdpw to make enable =0 */
	_delay_ms(1);
	/* make enable =0*/
	Pin_clear(CTRL_OUTPUT_PINS,E);
    17f0:	a8 e3       	ldi	r26, 0x38	; 56
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e8 e3       	ldi	r30, 0x38	; 56
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	87 7f       	andi	r24, 0xF7	; 247
    17fc:	8c 93       	st	X, r24
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	a0 e8       	ldi	r26, 0x80	; 128
    1804:	bf e3       	ldi	r27, 0x3F	; 63
    1806:	8d ab       	std	Y+53, r24	; 0x35
    1808:	9e ab       	std	Y+54, r25	; 0x36
    180a:	af ab       	std	Y+55, r26	; 0x37
    180c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180e:	6d a9       	ldd	r22, Y+53	; 0x35
    1810:	7e a9       	ldd	r23, Y+54	; 0x36
    1812:	8f a9       	ldd	r24, Y+55	; 0x37
    1814:	98 ad       	ldd	r25, Y+56	; 0x38
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	4a e7       	ldi	r20, 0x7A	; 122
    181c:	53 e4       	ldi	r21, 0x43	; 67
    181e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	89 ab       	std	Y+49, r24	; 0x31
    1828:	9a ab       	std	Y+50, r25	; 0x32
    182a:	ab ab       	std	Y+51, r26	; 0x33
    182c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    182e:	69 a9       	ldd	r22, Y+49	; 0x31
    1830:	7a a9       	ldd	r23, Y+50	; 0x32
    1832:	8b a9       	ldd	r24, Y+51	; 0x33
    1834:	9c a9       	ldd	r25, Y+52	; 0x34
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e8       	ldi	r20, 0x80	; 128
    183c:	5f e3       	ldi	r21, 0x3F	; 63
    183e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1842:	88 23       	and	r24, r24
    1844:	2c f4       	brge	.+10     	; 0x1850 <LCD_displayChar+0x49e>
		__ticks = 1;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	98 ab       	std	Y+48, r25	; 0x30
    184c:	8f a7       	std	Y+47, r24	; 0x2f
    184e:	3f c0       	rjmp	.+126    	; 0x18ce <LCD_displayChar+0x51c>
	else if (__tmp > 65535)
    1850:	69 a9       	ldd	r22, Y+49	; 0x31
    1852:	7a a9       	ldd	r23, Y+50	; 0x32
    1854:	8b a9       	ldd	r24, Y+51	; 0x33
    1856:	9c a9       	ldd	r25, Y+52	; 0x34
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	3f ef       	ldi	r19, 0xFF	; 255
    185c:	4f e7       	ldi	r20, 0x7F	; 127
    185e:	57 e4       	ldi	r21, 0x47	; 71
    1860:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1864:	18 16       	cp	r1, r24
    1866:	4c f5       	brge	.+82     	; 0x18ba <LCD_displayChar+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1868:	6d a9       	ldd	r22, Y+53	; 0x35
    186a:	7e a9       	ldd	r23, Y+54	; 0x36
    186c:	8f a9       	ldd	r24, Y+55	; 0x37
    186e:	98 ad       	ldd	r25, Y+56	; 0x38
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e2       	ldi	r20, 0x20	; 32
    1876:	51 e4       	ldi	r21, 0x41	; 65
    1878:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	bc 01       	movw	r22, r24
    1882:	cd 01       	movw	r24, r26
    1884:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	98 ab       	std	Y+48, r25	; 0x30
    188e:	8f a7       	std	Y+47, r24	; 0x2f
    1890:	0f c0       	rjmp	.+30     	; 0x18b0 <LCD_displayChar+0x4fe>
    1892:	89 e1       	ldi	r24, 0x19	; 25
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	9e a7       	std	Y+46, r25	; 0x2e
    1898:	8d a7       	std	Y+45, r24	; 0x2d
    189a:	8d a5       	ldd	r24, Y+45	; 0x2d
    189c:	9e a5       	ldd	r25, Y+46	; 0x2e
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <LCD_displayChar+0x4ec>
    18a2:	9e a7       	std	Y+46, r25	; 0x2e
    18a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a8:	98 a9       	ldd	r25, Y+48	; 0x30
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	98 ab       	std	Y+48, r25	; 0x30
    18ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b2:	98 a9       	ldd	r25, Y+48	; 0x30
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	69 f7       	brne	.-38     	; 0x1892 <LCD_displayChar+0x4e0>
    18b8:	14 c0       	rjmp	.+40     	; 0x18e2 <LCD_displayChar+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ba:	69 a9       	ldd	r22, Y+49	; 0x31
    18bc:	7a a9       	ldd	r23, Y+50	; 0x32
    18be:	8b a9       	ldd	r24, Y+51	; 0x33
    18c0:	9c a9       	ldd	r25, Y+52	; 0x34
    18c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	98 ab       	std	Y+48, r25	; 0x30
    18cc:	8f a7       	std	Y+47, r24	; 0x2f
    18ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    18d0:	98 a9       	ldd	r25, Y+48	; 0x30
    18d2:	9c a7       	std	Y+44, r25	; 0x2c
    18d4:	8b a7       	std	Y+43, r24	; 0x2b
    18d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    18d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <LCD_displayChar+0x528>
    18de:	9c a7       	std	Y+44, r25	; 0x2c
    18e0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/*start enabling again*/

		/* Enable =1 */
		Pin_output(CTRL_OUTPUT_PINS  ,E);
    18e2:	a8 e3       	ldi	r26, 0x38	; 56
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e8 e3       	ldi	r30, 0x38	; 56
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	88 60       	ori	r24, 0x08	; 8
    18ee:	8c 93       	st	X, r24
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e8       	ldi	r26, 0x80	; 128
    18f6:	bf e3       	ldi	r27, 0x3F	; 63
    18f8:	8f a3       	std	Y+39, r24	; 0x27
    18fa:	98 a7       	std	Y+40, r25	; 0x28
    18fc:	a9 a7       	std	Y+41, r26	; 0x29
    18fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	6f a1       	ldd	r22, Y+39	; 0x27
    1902:	78 a5       	ldd	r23, Y+40	; 0x28
    1904:	89 a5       	ldd	r24, Y+41	; 0x29
    1906:	9a a5       	ldd	r25, Y+42	; 0x2a
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a e7       	ldi	r20, 0x7A	; 122
    190e:	53 e4       	ldi	r21, 0x43	; 67
    1910:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	8b a3       	std	Y+35, r24	; 0x23
    191a:	9c a3       	std	Y+36, r25	; 0x24
    191c:	ad a3       	std	Y+37, r26	; 0x25
    191e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1920:	6b a1       	ldd	r22, Y+35	; 0x23
    1922:	7c a1       	ldd	r23, Y+36	; 0x24
    1924:	8d a1       	ldd	r24, Y+37	; 0x25
    1926:	9e a1       	ldd	r25, Y+38	; 0x26
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <LCD_displayChar+0x590>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9a a3       	std	Y+34, r25	; 0x22
    193e:	89 a3       	std	Y+33, r24	; 0x21
    1940:	3f c0       	rjmp	.+126    	; 0x19c0 <LCD_displayChar+0x60e>
	else if (__tmp > 65535)
    1942:	6b a1       	ldd	r22, Y+35	; 0x23
    1944:	7c a1       	ldd	r23, Y+36	; 0x24
    1946:	8d a1       	ldd	r24, Y+37	; 0x25
    1948:	9e a1       	ldd	r25, Y+38	; 0x26
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	4c f5       	brge	.+82     	; 0x19ac <LCD_displayChar+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	6f a1       	ldd	r22, Y+39	; 0x27
    195c:	78 a5       	ldd	r23, Y+40	; 0x28
    195e:	89 a5       	ldd	r24, Y+41	; 0x29
    1960:	9a a5       	ldd	r25, Y+42	; 0x2a
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9a a3       	std	Y+34, r25	; 0x22
    1980:	89 a3       	std	Y+33, r24	; 0x21
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <LCD_displayChar+0x5f0>
    1984:	89 e1       	ldi	r24, 0x19	; 25
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	98 a3       	std	Y+32, r25	; 0x20
    198a:	8f 8f       	std	Y+31, r24	; 0x1f
    198c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    198e:	98 a1       	ldd	r25, Y+32	; 0x20
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_displayChar+0x5de>
    1994:	98 a3       	std	Y+32, r25	; 0x20
    1996:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	89 a1       	ldd	r24, Y+33	; 0x21
    199a:	9a a1       	ldd	r25, Y+34	; 0x22
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	9a a3       	std	Y+34, r25	; 0x22
    19a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	89 a1       	ldd	r24, Y+33	; 0x21
    19a4:	9a a1       	ldd	r25, Y+34	; 0x22
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	69 f7       	brne	.-38     	; 0x1984 <LCD_displayChar+0x5d2>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <LCD_displayChar+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ac:	6b a1       	ldd	r22, Y+35	; 0x23
    19ae:	7c a1       	ldd	r23, Y+36	; 0x24
    19b0:	8d a1       	ldd	r24, Y+37	; 0x25
    19b2:	9e a1       	ldd	r25, Y+38	; 0x26
    19b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9a a3       	std	Y+34, r25	; 0x22
    19be:	89 a3       	std	Y+33, r24	; 0x21
    19c0:	89 a1       	ldd	r24, Y+33	; 0x21
    19c2:	9a a1       	ldd	r25, Y+34	; 0x22
    19c4:	9e 8f       	std	Y+30, r25	; 0x1e
    19c6:	8d 8f       	std	Y+29, r24	; 0x1d
    19c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <LCD_displayChar+0x61a>
    19d0:	9e 8f       	std	Y+30, r25	; 0x1e
    19d2:	8d 8f       	std	Y+29, r24	; 0x1d
		/*DATA_OUTPUT_PINS = (DATA_OUTPUT_PINS& 0xF0) | (data & 0x0F);*/
		  TAKE_SCCOMMAND(DATA_OUTPUT_PINS,data);

     #else
	        /*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS&0x0F)|((data&0x0F)<<4);*/
		     TAKE_SCCOMMAND(DATA_OUTPUT_PINS,data);
    19d4:	ab e3       	ldi	r26, 0x3B	; 59
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	eb e3       	ldi	r30, 0x3B	; 59
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	28 2f       	mov	r18, r24
    19e0:	2f 70       	andi	r18, 0x0F	; 15
    19e2:	fe 01       	movw	r30, r28
    19e4:	ed 59       	subi	r30, 0x9D	; 157
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	80 81       	ld	r24, Z
    19ea:	88 2f       	mov	r24, r24
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	82 95       	swap	r24
    19f0:	92 95       	swap	r25
    19f2:	90 7f       	andi	r25, 0xF0	; 240
    19f4:	98 27       	eor	r25, r24
    19f6:	80 7f       	andi	r24, 0xF0	; 240
    19f8:	98 27       	eor	r25, r24
    19fa:	82 2b       	or	r24, r18
    19fc:	8c 93       	st	X, r24
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	a0 e8       	ldi	r26, 0x80	; 128
    1a04:	bf e3       	ldi	r27, 0x3F	; 63
    1a06:	89 8f       	std	Y+25, r24	; 0x19
    1a08:	9a 8f       	std	Y+26, r25	; 0x1a
    1a0a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	4a e7       	ldi	r20, 0x7A	; 122
    1a1c:	53 e4       	ldi	r21, 0x43	; 67
    1a1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	8d 8b       	std	Y+21, r24	; 0x15
    1a28:	9e 8b       	std	Y+22, r25	; 0x16
    1a2a:	af 8b       	std	Y+23, r26	; 0x17
    1a2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a30:	7e 89       	ldd	r23, Y+22	; 0x16
    1a32:	8f 89       	ldd	r24, Y+23	; 0x17
    1a34:	98 8d       	ldd	r25, Y+24	; 0x18
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	40 e8       	ldi	r20, 0x80	; 128
    1a3c:	5f e3       	ldi	r21, 0x3F	; 63
    1a3e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a42:	88 23       	and	r24, r24
    1a44:	2c f4       	brge	.+10     	; 0x1a50 <LCD_displayChar+0x69e>
		__ticks = 1;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	9c 8b       	std	Y+20, r25	; 0x14
    1a4c:	8b 8b       	std	Y+19, r24	; 0x13
    1a4e:	3f c0       	rjmp	.+126    	; 0x1ace <LCD_displayChar+0x71c>
	else if (__tmp > 65535)
    1a50:	6d 89       	ldd	r22, Y+21	; 0x15
    1a52:	7e 89       	ldd	r23, Y+22	; 0x16
    1a54:	8f 89       	ldd	r24, Y+23	; 0x17
    1a56:	98 8d       	ldd	r25, Y+24	; 0x18
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	3f ef       	ldi	r19, 0xFF	; 255
    1a5c:	4f e7       	ldi	r20, 0x7F	; 127
    1a5e:	57 e4       	ldi	r21, 0x47	; 71
    1a60:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a64:	18 16       	cp	r1, r24
    1a66:	4c f5       	brge	.+82     	; 0x1aba <LCD_displayChar+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a68:	69 8d       	ldd	r22, Y+25	; 0x19
    1a6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e2       	ldi	r20, 0x20	; 32
    1a76:	51 e4       	ldi	r21, 0x41	; 65
    1a78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	bc 01       	movw	r22, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	9c 8b       	std	Y+20, r25	; 0x14
    1a8e:	8b 8b       	std	Y+19, r24	; 0x13
    1a90:	0f c0       	rjmp	.+30     	; 0x1ab0 <LCD_displayChar+0x6fe>
    1a92:	89 e1       	ldi	r24, 0x19	; 25
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	9a 8b       	std	Y+18, r25	; 0x12
    1a98:	89 8b       	std	Y+17, r24	; 0x11
    1a9a:	89 89       	ldd	r24, Y+17	; 0x11
    1a9c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <LCD_displayChar+0x6ec>
    1aa2:	9a 8b       	std	Y+18, r25	; 0x12
    1aa4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa6:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	9c 8b       	std	Y+20, r25	; 0x14
    1aae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	69 f7       	brne	.-38     	; 0x1a92 <LCD_displayChar+0x6e0>
    1ab8:	14 c0       	rjmp	.+40     	; 0x1ae2 <LCD_displayChar+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aba:	6d 89       	ldd	r22, Y+21	; 0x15
    1abc:	7e 89       	ldd	r23, Y+22	; 0x16
    1abe:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	9c 8b       	std	Y+20, r25	; 0x14
    1acc:	8b 8b       	std	Y+19, r24	; 0x13
    1ace:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad2:	98 8b       	std	Y+16, r25	; 0x10
    1ad4:	8f 87       	std	Y+15, r24	; 0x0f
    1ad6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad8:	98 89       	ldd	r25, Y+16	; 0x10
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <LCD_displayChar+0x728>
    1ade:	98 8b       	std	Y+16, r25	; 0x10
    1ae0:	8f 87       	std	Y+15, r24	; 0x0f

#endif
	        /*wait tdpw to make enable =0 */
	        	_delay_ms(1);
	        	/* make enable =0*/
	        	Pin_clear(CTRL_OUTPUT_PINS,E);
    1ae2:	a8 e3       	ldi	r26, 0x38	; 56
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e8 e3       	ldi	r30, 0x38	; 56
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	87 7f       	andi	r24, 0xF7	; 247
    1aee:	8c 93       	st	X, r24
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a0 e8       	ldi	r26, 0x80	; 128
    1af6:	bf e3       	ldi	r27, 0x3F	; 63
    1af8:	8b 87       	std	Y+11, r24	; 0x0b
    1afa:	9c 87       	std	Y+12, r25	; 0x0c
    1afc:	ad 87       	std	Y+13, r26	; 0x0d
    1afe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	4a e7       	ldi	r20, 0x7A	; 122
    1b0e:	53 e4       	ldi	r21, 0x43	; 67
    1b10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	8f 83       	std	Y+7, r24	; 0x07
    1b1a:	98 87       	std	Y+8, r25	; 0x08
    1b1c:	a9 87       	std	Y+9, r26	; 0x09
    1b1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b20:	6f 81       	ldd	r22, Y+7	; 0x07
    1b22:	78 85       	ldd	r23, Y+8	; 0x08
    1b24:	89 85       	ldd	r24, Y+9	; 0x09
    1b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	5f e3       	ldi	r21, 0x3F	; 63
    1b30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b34:	88 23       	and	r24, r24
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <LCD_displayChar+0x790>
		__ticks = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
    1b40:	3f c0       	rjmp	.+126    	; 0x1bc0 <LCD_displayChar+0x80e>
	else if (__tmp > 65535)
    1b42:	6f 81       	ldd	r22, Y+7	; 0x07
    1b44:	78 85       	ldd	r23, Y+8	; 0x08
    1b46:	89 85       	ldd	r24, Y+9	; 0x09
    1b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	3f ef       	ldi	r19, 0xFF	; 255
    1b4e:	4f e7       	ldi	r20, 0x7F	; 127
    1b50:	57 e4       	ldi	r21, 0x47	; 71
    1b52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	4c f5       	brge	.+82     	; 0x1bac <LCD_displayChar+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	9e 83       	std	Y+6, r25	; 0x06
    1b80:	8d 83       	std	Y+5, r24	; 0x05
    1b82:	0f c0       	rjmp	.+30     	; 0x1ba2 <LCD_displayChar+0x7f0>
    1b84:	89 e1       	ldi	r24, 0x19	; 25
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	9c 83       	std	Y+4, r25	; 0x04
    1b8a:	8b 83       	std	Y+3, r24	; 0x03
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <LCD_displayChar+0x7de>
    1b94:	9c 83       	std	Y+4, r25	; 0x04
    1b96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b98:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	69 f7       	brne	.-38     	; 0x1b84 <LCD_displayChar+0x7d2>
    1baa:	14 c0       	rjmp	.+40     	; 0x1bd4 <LCD_displayChar+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bac:	6f 81       	ldd	r22, Y+7	; 0x07
    1bae:	78 85       	ldd	r23, Y+8	; 0x08
    1bb0:	89 85       	ldd	r24, Y+9	; 0x09
    1bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	9e 83       	std	Y+6, r25	; 0x06
    1bbe:	8d 83       	std	Y+5, r24	; 0x05
    1bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc4:	9a 83       	std	Y+2, r25	; 0x02
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	9a 81       	ldd	r25, Y+2	; 0x02
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <LCD_displayChar+0x81a>
    1bd0:	9a 83       	std	Y+2, r25	; 0x02
    1bd2:	89 83       	std	Y+1, r24	; 0x01
	        	/*wait th 13ns */
	        	_delay_ms(1);


}
    1bd4:	cd 59       	subi	r28, 0x9D	; 157
    1bd6:	df 4f       	sbci	r29, 0xFF	; 255
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	1f 91       	pop	r17
    1be8:	0f 91       	pop	r16
    1bea:	08 95       	ret

00001bec <LCD_displayString>:




   void LCD_displayString(const char *Str)
   {
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	00 d0       	rcall	.+0      	; 0x1bf2 <LCD_displayString+0x6>
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	9a 83       	std	Y+2, r25	; 0x02
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	0a c0       	rjmp	.+20     	; 0x1c10 <LCD_displayString+0x24>

   	while((*Str) != '\0')
   	{
   		LCD_displayChar(*Str);
    1bfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1c00:	80 81       	ld	r24, Z
    1c02:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_displayChar>
   		Str++;
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	9a 83       	std	Y+2, r25	; 0x02
    1c0e:	89 83       	std	Y+1, r24	; 0x01


   void LCD_displayString(const char *Str)
   {

   	while((*Str) != '\0')
    1c10:	e9 81       	ldd	r30, Y+1	; 0x01
    1c12:	fa 81       	ldd	r31, Y+2	; 0x02
    1c14:	80 81       	ld	r24, Z
    1c16:	88 23       	and	r24, r24
    1c18:	89 f7       	brne	.-30     	; 0x1bfc <LCD_displayString+0x10>
   	{
   		LCD_displayChar(*Str);
   		Str++;
   	}
   }
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <LCD_displayString_GPS>:

   /*********************************************************************************************/

   void LCD_displayString_GPS(const char *Str)
      {
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <LCD_displayString_GPS+0x6>
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	9a 83       	std	Y+2, r25	; 0x02
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	0a c0       	rjmp	.+20     	; 0x1c48 <LCD_displayString_GPS+0x24>

      	while((*Str) != '*')
      	{
      		LCD_displayChar(*Str);
    1c34:	e9 81       	ldd	r30, Y+1	; 0x01
    1c36:	fa 81       	ldd	r31, Y+2	; 0x02
    1c38:	80 81       	ld	r24, Z
    1c3a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_displayChar>
      		Str++;
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	9a 81       	ldd	r25, Y+2	; 0x02
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	89 83       	std	Y+1, r24	; 0x01
   /*********************************************************************************************/

   void LCD_displayString_GPS(const char *Str)
      {

      	while((*Str) != '*')
    1c48:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8a 32       	cpi	r24, 0x2A	; 42
    1c50:	89 f7       	brne	.-30     	; 0x1c34 <LCD_displayString_GPS+0x10>
      	{
      		LCD_displayChar(*Str);
      		Str++;
      	}
      }
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <LCD_gotoRawCol>:


   /***********************************************************************************************/


   void LCD_gotoRawCol(unit8 row, unit8 col){
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <LCD_gotoRawCol+0x6>
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <LCD_gotoRawCol+0x8>
    1c64:	0f 92       	push	r0
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	8a 83       	std	Y+2, r24	; 0x02
    1c6c:	6b 83       	std	Y+3, r22	; 0x03
	   unit8 address;
	   switch(row){
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	3d 83       	std	Y+5, r19	; 0x05
    1c76:	2c 83       	std	Y+4, r18	; 0x04
    1c78:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	31 f0       	breq	.+12     	; 0x1c8c <LCD_gotoRawCol+0x30>
    1c80:	2c 81       	ldd	r18, Y+4	; 0x04
    1c82:	3d 81       	ldd	r19, Y+5	; 0x05
    1c84:	21 30       	cpi	r18, 0x01	; 1
    1c86:	31 05       	cpc	r19, r1
    1c88:	21 f0       	breq	.+8      	; 0x1c92 <LCD_gotoRawCol+0x36>
    1c8a:	06 c0       	rjmp	.+12     	; 0x1c98 <LCD_gotoRawCol+0x3c>
	       case 0:
		      address=col;
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	03 c0       	rjmp	.+6      	; 0x1c98 <LCD_gotoRawCol+0x3c>
		       break;
	       case 1:
		      address=0x40+col;
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	80 5c       	subi	r24, 0xC0	; 192
    1c96:	89 83       	std	Y+1, r24	; 0x01
	        }
	    LCD_sendCommand(address|CURSOR_MoveToFirstLoc);
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	80 68       	ori	r24, 0x80	; 128
    1c9c:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_sendCommand>

	   }
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <LCD_IntToStr>:



void LCD_IntToStr(unit8 data){
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	61 97       	sbiw	r28, 0x11	; 17
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	cd bf       	out	0x3d, r28	; 61
    1cc4:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    1cc6:	89 89       	ldd	r24, Y+17	; 0x11
    1cc8:	88 2f       	mov	r24, r24
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9e 01       	movw	r18, r28
    1cce:	2f 5f       	subi	r18, 0xFF	; 255
    1cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd2:	b9 01       	movw	r22, r18
    1cd4:	4a e0       	ldi	r20, 0x0A	; 10
    1cd6:	50 e0       	ldi	r21, 0x00	; 0
    1cd8:	0e 94 8c 13 	call	0x2718	; 0x2718 <itoa>
	LCD_displayString(buff);
    1cdc:	ce 01       	movw	r24, r28
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <LCD_displayString>
}
    1ce4:	61 96       	adiw	r28, 0x11	; 17
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	cd bf       	out	0x3d, r28	; 61
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <LCD_displayStrRowCol>:


void LCD_displayStrRowCol(unit8 row,unit8 col,const char *Str){
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	28 97       	sbiw	r28, 0x08	; 8
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	8b 83       	std	Y+3, r24	; 0x03
    1d0c:	6c 83       	std	Y+4, r22	; 0x04
    1d0e:	5e 83       	std	Y+6, r21	; 0x06
    1d10:	4d 83       	std	Y+5, r20	; 0x05
	unit8 address,i=0;
    1d12:	19 82       	std	Y+1, r1	; 0x01
		   switch(row){
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	38 87       	std	Y+8, r19	; 0x08
    1d1c:	2f 83       	std	Y+7, r18	; 0x07
    1d1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d20:	98 85       	ldd	r25, Y+8	; 0x08
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	31 f0       	breq	.+12     	; 0x1d32 <LCD_displayStrRowCol+0x3c>
    1d26:	2f 81       	ldd	r18, Y+7	; 0x07
    1d28:	38 85       	ldd	r19, Y+8	; 0x08
    1d2a:	21 30       	cpi	r18, 0x01	; 1
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	21 f0       	breq	.+8      	; 0x1d38 <LCD_displayStrRowCol+0x42>
    1d30:	06 c0       	rjmp	.+12     	; 0x1d3e <LCD_displayStrRowCol+0x48>
		       case 0:
			      address=col;
    1d32:	8c 81       	ldd	r24, Y+4	; 0x04
    1d34:	8a 83       	std	Y+2, r24	; 0x02
    1d36:	03 c0       	rjmp	.+6      	; 0x1d3e <LCD_displayStrRowCol+0x48>
			       break;
		       case 1:
			      address=0x40+col;
    1d38:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3a:	80 5c       	subi	r24, 0xC0	; 192
    1d3c:	8a 83       	std	Y+2, r24	; 0x02
		        }
    LCD_sendCommand(address|CURSOR_MoveToFirstLoc);
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	80 68       	ori	r24, 0x80	; 128
    1d42:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_sendCommand>
    1d46:	10 c0       	rjmp	.+32     	; 0x1d68 <LCD_displayStrRowCol+0x72>

	while((*Str) != '\0')
   	{
   		LCD_displayChar(Str[i]);
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d50:	9e 81       	ldd	r25, Y+6	; 0x06
    1d52:	fc 01       	movw	r30, r24
    1d54:	e2 0f       	add	r30, r18
    1d56:	f3 1f       	adc	r31, r19
    1d58:	80 81       	ld	r24, Z
    1d5a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_displayChar>
   		Str++;
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	9e 83       	std	Y+6, r25	; 0x06
    1d66:	8d 83       	std	Y+5, r24	; 0x05
		       case 1:
			      address=0x40+col;
		        }
    LCD_sendCommand(address|CURSOR_MoveToFirstLoc);

	while((*Str) != '\0')
    1d68:	ed 81       	ldd	r30, Y+5	; 0x05
    1d6a:	fe 81       	ldd	r31, Y+6	; 0x06
    1d6c:	80 81       	ld	r24, Z
    1d6e:	88 23       	and	r24, r24
    1d70:	59 f7       	brne	.-42     	; 0x1d48 <LCD_displayStrRowCol+0x52>
   	{
   		LCD_displayChar(Str[i]);
   		Str++;
   	}
}
    1d72:	28 96       	adiw	r28, 0x08	; 8
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <LCD_clearScreen>:


void LCD_clearScreen(void)
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_LCD); //clear display
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	0e 94 bc 05 	call	0xb78	; 0xb78 <LCD_sendCommand>
}
    1d92:	cf 91       	pop	r28
    1d94:	df 91       	pop	r29
    1d96:	08 95       	ret

00001d98 <Write_Command>:



// AA 3D 00 08 00 00 00 0F CC 33 C3 3C

 void Write_Command(unit8 VP_LSB_address,unit8 _8bit_data){
    1d98:	df 93       	push	r29
    1d9a:	cf 93       	push	r28
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	60 97       	sbiw	r28, 0x10	; 16
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	8f 87       	std	Y+15, r24	; 0x0f
    1dae:	68 8b       	std	Y+16, r22	; 0x10

	 UART_sendByte(0xAA);
    1db0:	8a ea       	ldi	r24, 0xAA	; 170
    1db2:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

	 UART_sendByte(0x3D);
    1db6:	8d e3       	ldi	r24, 0x3D	; 61
    1db8:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
	 /***********************************************************************************/
	 UART_sendByte(0x00);
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

	 UART_sendByte(0x08);
    1dc2:	88 e0       	ldi	r24, 0x08	; 8
    1dc4:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

	 UART_sendByte(0x00);
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

	 UART_sendByte(VP_LSB_address);
    1dce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd0:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
	 /***********************************************************************************/
	 UART_sendByte(0x00);
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

	 UART_sendByte(_8bit_data);
    1dda:	88 89       	ldd	r24, Y+16	; 0x10
    1ddc:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
	 /***********************************************************************************/
	 UART_sendByte(0xCC);
    1de0:	8c ec       	ldi	r24, 0xCC	; 204
    1de2:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

	 UART_sendByte(0x33);
    1de6:	83 e3       	ldi	r24, 0x33	; 51
    1de8:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

	 UART_sendByte(0xC3);
    1dec:	83 ec       	ldi	r24, 0xC3	; 195
    1dee:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

	 UART_sendByte(0x3C);
    1df2:	8c e3       	ldi	r24, 0x3C	; 60
    1df4:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	a8 ec       	ldi	r26, 0xC8	; 200
    1dfe:	b2 e4       	ldi	r27, 0x42	; 66
    1e00:	8b 87       	std	Y+11, r24	; 0x0b
    1e02:	9c 87       	std	Y+12, r25	; 0x0c
    1e04:	ad 87       	std	Y+13, r26	; 0x0d
    1e06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4a e7       	ldi	r20, 0x7A	; 122
    1e16:	53 e4       	ldi	r21, 0x43	; 67
    1e18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	8f 83       	std	Y+7, r24	; 0x07
    1e22:	98 87       	std	Y+8, r25	; 0x08
    1e24:	a9 87       	std	Y+9, r26	; 0x09
    1e26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e28:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2a:	78 85       	ldd	r23, Y+8	; 0x08
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	5f e3       	ldi	r21, 0x3F	; 63
    1e38:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e3c:	88 23       	and	r24, r24
    1e3e:	2c f4       	brge	.+10     	; 0x1e4a <Write_Command+0xb2>
		__ticks = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9e 83       	std	Y+6, r25	; 0x06
    1e46:	8d 83       	std	Y+5, r24	; 0x05
    1e48:	3f c0       	rjmp	.+126    	; 0x1ec8 <Write_Command+0x130>
	else if (__tmp > 65535)
    1e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4c:	78 85       	ldd	r23, Y+8	; 0x08
    1e4e:	89 85       	ldd	r24, Y+9	; 0x09
    1e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	3f ef       	ldi	r19, 0xFF	; 255
    1e56:	4f e7       	ldi	r20, 0x7F	; 127
    1e58:	57 e4       	ldi	r21, 0x47	; 71
    1e5a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e5e:	18 16       	cp	r1, r24
    1e60:	4c f5       	brge	.+82     	; 0x1eb4 <Write_Command+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e2       	ldi	r20, 0x20	; 32
    1e70:	51 e4       	ldi	r21, 0x41	; 65
    1e72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
    1e8a:	0f c0       	rjmp	.+30     	; 0x1eaa <Write_Command+0x112>
    1e8c:	89 e1       	ldi	r24, 0x19	; 25
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9c 83       	std	Y+4, r25	; 0x04
    1e92:	8b 83       	std	Y+3, r24	; 0x03
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	9c 81       	ldd	r25, Y+4	; 0x04
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <Write_Command+0x100>
    1e9c:	9c 83       	std	Y+4, r25	; 0x04
    1e9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	9e 83       	std	Y+6, r25	; 0x06
    1ea8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1eac:	9e 81       	ldd	r25, Y+6	; 0x06
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	69 f7       	brne	.-38     	; 0x1e8c <Write_Command+0xf4>
    1eb2:	14 c0       	rjmp	.+40     	; 0x1edc <Write_Command+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb6:	78 85       	ldd	r23, Y+8	; 0x08
    1eb8:	89 85       	ldd	r24, Y+9	; 0x09
    1eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <Write_Command+0x13c>
    1ed8:	9a 83       	std	Y+2, r25	; 0x02
    1eda:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(100);
  }
    1edc:	60 96       	adiw	r28, 0x10	; 16
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <main>:

#include"LCD_SMART.h"
#include"LCD.h"


int main(void){
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	c6 54       	subi	r28, 0x46	; 70
    1efc:	d0 40       	sbci	r29, 0x00	; 0
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
    1f08:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_init>

	UART_init();
    1f0c:	0e 94 a9 12 	call	0x2552	; 0x2552 <UART_init>
    DDRD|=0x80;
    1f10:	a1 e3       	ldi	r26, 0x31	; 49
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e1 e3       	ldi	r30, 0x31	; 49
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	80 68       	ori	r24, 0x80	; 128
    1f1c:	8c 93       	st	X, r24



	while(1){

		Write_Command(0x00,0x0F);
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	6f e0       	ldi	r22, 0x0F	; 15
    1f22:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <Write_Command>
		Write_Command(0x02,0x01);
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	61 e0       	ldi	r22, 0x01	; 1
    1f2a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <Write_Command>
		Write_Command(0x04,0x02);
    1f2e:	84 e0       	ldi	r24, 0x04	; 4
    1f30:	62 e0       	ldi	r22, 0x02	; 2
    1f32:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <Write_Command>
		Write_Command(0x08,0x03);
    1f36:	88 e0       	ldi	r24, 0x08	; 8
    1f38:	63 e0       	ldi	r22, 0x03	; 3
    1f3a:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <Write_Command>
    1f3e:	fe 01       	movw	r30, r28
    1f40:	ed 5b       	subi	r30, 0xBD	; 189
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e4       	ldi	r25, 0x40	; 64
    1f48:	ac e1       	ldi	r26, 0x1C	; 28
    1f4a:	b6 e4       	ldi	r27, 0x46	; 70
    1f4c:	80 83       	st	Z, r24
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	a2 83       	std	Z+2, r26	; 0x02
    1f52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f54:	8e 01       	movw	r16, r28
    1f56:	01 5c       	subi	r16, 0xC1	; 193
    1f58:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	ed 5b       	subi	r30, 0xBD	; 189
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	4a e7       	ldi	r20, 0x7A	; 122
    1f6e:	53 e4       	ldi	r21, 0x43	; 67
    1f70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	f8 01       	movw	r30, r16
    1f7a:	80 83       	st	Z, r24
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	a2 83       	std	Z+2, r26	; 0x02
    1f80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f82:	fe 01       	movw	r30, r28
    1f84:	ff 96       	adiw	r30, 0x3f	; 63
    1f86:	60 81       	ld	r22, Z
    1f88:	71 81       	ldd	r23, Z+1	; 0x01
    1f8a:	82 81       	ldd	r24, Z+2	; 0x02
    1f8c:	93 81       	ldd	r25, Z+3	; 0x03
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e8       	ldi	r20, 0x80	; 128
    1f94:	5f e3       	ldi	r21, 0x3F	; 63
    1f96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f9a:	88 23       	and	r24, r24
    1f9c:	2c f4       	brge	.+10     	; 0x1fa8 <main+0xba>
		__ticks = 1;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9e af       	std	Y+62, r25	; 0x3e
    1fa4:	8d af       	std	Y+61, r24	; 0x3d
    1fa6:	46 c0       	rjmp	.+140    	; 0x2034 <main+0x146>
	else if (__tmp > 65535)
    1fa8:	fe 01       	movw	r30, r28
    1faa:	ff 96       	adiw	r30, 0x3f	; 63
    1fac:	60 81       	ld	r22, Z
    1fae:	71 81       	ldd	r23, Z+1	; 0x01
    1fb0:	82 81       	ldd	r24, Z+2	; 0x02
    1fb2:	93 81       	ldd	r25, Z+3	; 0x03
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	3f ef       	ldi	r19, 0xFF	; 255
    1fb8:	4f e7       	ldi	r20, 0x7F	; 127
    1fba:	57 e4       	ldi	r21, 0x47	; 71
    1fbc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fc0:	18 16       	cp	r1, r24
    1fc2:	64 f5       	brge	.+88     	; 0x201c <main+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	ed 5b       	subi	r30, 0xBD	; 189
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	60 81       	ld	r22, Z
    1fcc:	71 81       	ldd	r23, Z+1	; 0x01
    1fce:	82 81       	ldd	r24, Z+2	; 0x02
    1fd0:	93 81       	ldd	r25, Z+3	; 0x03
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e2       	ldi	r20, 0x20	; 32
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	cd 01       	movw	r24, r26
    1fe6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	9e af       	std	Y+62, r25	; 0x3e
    1ff0:	8d af       	std	Y+61, r24	; 0x3d
    1ff2:	0f c0       	rjmp	.+30     	; 0x2012 <main+0x124>
    1ff4:	89 e1       	ldi	r24, 0x19	; 25
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9c af       	std	Y+60, r25	; 0x3c
    1ffa:	8b af       	std	Y+59, r24	; 0x3b
    1ffc:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ffe:	9c ad       	ldd	r25, Y+60	; 0x3c
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <main+0x112>
    2004:	9c af       	std	Y+60, r25	; 0x3c
    2006:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2008:	8d ad       	ldd	r24, Y+61	; 0x3d
    200a:	9e ad       	ldd	r25, Y+62	; 0x3e
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	9e af       	std	Y+62, r25	; 0x3e
    2010:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2012:	8d ad       	ldd	r24, Y+61	; 0x3d
    2014:	9e ad       	ldd	r25, Y+62	; 0x3e
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	69 f7       	brne	.-38     	; 0x1ff4 <main+0x106>
    201a:	16 c0       	rjmp	.+44     	; 0x2048 <main+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201c:	fe 01       	movw	r30, r28
    201e:	ff 96       	adiw	r30, 0x3f	; 63
    2020:	60 81       	ld	r22, Z
    2022:	71 81       	ldd	r23, Z+1	; 0x01
    2024:	82 81       	ldd	r24, Z+2	; 0x02
    2026:	93 81       	ldd	r25, Z+3	; 0x03
    2028:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	9e af       	std	Y+62, r25	; 0x3e
    2032:	8d af       	std	Y+61, r24	; 0x3d
    2034:	8d ad       	ldd	r24, Y+61	; 0x3d
    2036:	9e ad       	ldd	r25, Y+62	; 0x3e
    2038:	9a af       	std	Y+58, r25	; 0x3a
    203a:	89 af       	std	Y+57, r24	; 0x39
    203c:	89 ad       	ldd	r24, Y+57	; 0x39
    203e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <main+0x152>
    2044:	9a af       	std	Y+58, r25	; 0x3a
    2046:	89 af       	std	Y+57, r24	; 0x39



		//      AA 3D 00 08 00 00 0000 CC 33 C3 3C

		    UART_sendByte(0xAA);
    2048:	8a ea       	ldi	r24, 0xAA	; 170
    204a:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x3D);
    204e:	8d e3       	ldi	r24, 0x3D	; 61
    2050:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
/***********************************************************************************/
		    UART_sendByte(0x00);
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x08);
    205a:	88 e0       	ldi	r24, 0x08	; 8
    205c:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x00);
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x00);
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
/***********************************************************************************/
		    UART_sendByte(0x00);
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x0A);
    2072:	8a e0       	ldi	r24, 0x0A	; 10
    2074:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
/***********************************************************************************/
		    UART_sendByte(0xCC);
    2078:	8c ec       	ldi	r24, 0xCC	; 204
    207a:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x33);
    207e:	83 e3       	ldi	r24, 0x33	; 51
    2080:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0xC3);
    2084:	83 ec       	ldi	r24, 0xC3	; 195
    2086:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x3C);
    208a:	8c e3       	ldi	r24, 0x3C	; 60
    208c:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a8 ec       	ldi	r26, 0xC8	; 200
    2096:	b2 e4       	ldi	r27, 0x42	; 66
    2098:	8d ab       	std	Y+53, r24	; 0x35
    209a:	9e ab       	std	Y+54, r25	; 0x36
    209c:	af ab       	std	Y+55, r26	; 0x37
    209e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a0:	6d a9       	ldd	r22, Y+53	; 0x35
    20a2:	7e a9       	ldd	r23, Y+54	; 0x36
    20a4:	8f a9       	ldd	r24, Y+55	; 0x37
    20a6:	98 ad       	ldd	r25, Y+56	; 0x38
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	4a e7       	ldi	r20, 0x7A	; 122
    20ae:	53 e4       	ldi	r21, 0x43	; 67
    20b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	89 ab       	std	Y+49, r24	; 0x31
    20ba:	9a ab       	std	Y+50, r25	; 0x32
    20bc:	ab ab       	std	Y+51, r26	; 0x33
    20be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20c0:	69 a9       	ldd	r22, Y+49	; 0x31
    20c2:	7a a9       	ldd	r23, Y+50	; 0x32
    20c4:	8b a9       	ldd	r24, Y+51	; 0x33
    20c6:	9c a9       	ldd	r25, Y+52	; 0x34
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20d4:	88 23       	and	r24, r24
    20d6:	2c f4       	brge	.+10     	; 0x20e2 <main+0x1f4>
		__ticks = 1;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	98 ab       	std	Y+48, r25	; 0x30
    20de:	8f a7       	std	Y+47, r24	; 0x2f
    20e0:	3f c0       	rjmp	.+126    	; 0x2160 <main+0x272>
	else if (__tmp > 65535)
    20e2:	69 a9       	ldd	r22, Y+49	; 0x31
    20e4:	7a a9       	ldd	r23, Y+50	; 0x32
    20e6:	8b a9       	ldd	r24, Y+51	; 0x33
    20e8:	9c a9       	ldd	r25, Y+52	; 0x34
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	3f ef       	ldi	r19, 0xFF	; 255
    20ee:	4f e7       	ldi	r20, 0x7F	; 127
    20f0:	57 e4       	ldi	r21, 0x47	; 71
    20f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20f6:	18 16       	cp	r1, r24
    20f8:	4c f5       	brge	.+82     	; 0x214c <main+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fa:	6d a9       	ldd	r22, Y+53	; 0x35
    20fc:	7e a9       	ldd	r23, Y+54	; 0x36
    20fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2100:	98 ad       	ldd	r25, Y+56	; 0x38
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e2       	ldi	r20, 0x20	; 32
    2108:	51 e4       	ldi	r21, 0x41	; 65
    210a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	bc 01       	movw	r22, r24
    2114:	cd 01       	movw	r24, r26
    2116:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	98 ab       	std	Y+48, r25	; 0x30
    2120:	8f a7       	std	Y+47, r24	; 0x2f
    2122:	0f c0       	rjmp	.+30     	; 0x2142 <main+0x254>
    2124:	89 e1       	ldi	r24, 0x19	; 25
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9e a7       	std	Y+46, r25	; 0x2e
    212a:	8d a7       	std	Y+45, r24	; 0x2d
    212c:	8d a5       	ldd	r24, Y+45	; 0x2d
    212e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <main+0x242>
    2134:	9e a7       	std	Y+46, r25	; 0x2e
    2136:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2138:	8f a5       	ldd	r24, Y+47	; 0x2f
    213a:	98 a9       	ldd	r25, Y+48	; 0x30
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	98 ab       	std	Y+48, r25	; 0x30
    2140:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2142:	8f a5       	ldd	r24, Y+47	; 0x2f
    2144:	98 a9       	ldd	r25, Y+48	; 0x30
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	69 f7       	brne	.-38     	; 0x2124 <main+0x236>
    214a:	14 c0       	rjmp	.+40     	; 0x2174 <main+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214c:	69 a9       	ldd	r22, Y+49	; 0x31
    214e:	7a a9       	ldd	r23, Y+50	; 0x32
    2150:	8b a9       	ldd	r24, Y+51	; 0x33
    2152:	9c a9       	ldd	r25, Y+52	; 0x34
    2154:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	98 ab       	std	Y+48, r25	; 0x30
    215e:	8f a7       	std	Y+47, r24	; 0x2f
    2160:	8f a5       	ldd	r24, Y+47	; 0x2f
    2162:	98 a9       	ldd	r25, Y+48	; 0x30
    2164:	9c a7       	std	Y+44, r25	; 0x2c
    2166:	8b a7       	std	Y+43, r24	; 0x2b
    2168:	8b a5       	ldd	r24, Y+43	; 0x2b
    216a:	9c a5       	ldd	r25, Y+44	; 0x2c
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <main+0x27e>
    2170:	9c a7       	std	Y+44, r25	; 0x2c
    2172:	8b a7       	std	Y+43, r24	; 0x2b

_delay_ms(100);



		    UART_sendByte(0xAA);
    2174:	8a ea       	ldi	r24, 0xAA	; 170
    2176:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x3D);
    217a:	8d e3       	ldi	r24, 0x3D	; 61
    217c:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
/*************************************************************************************/
		    UART_sendByte(0x00);
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x08);
    2186:	88 e0       	ldi	r24, 0x08	; 8
    2188:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x00);
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x02);
    2192:	82 e0       	ldi	r24, 0x02	; 2
    2194:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
/**************************************************************************************/
		    UART_sendByte(0x00);
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x0B);
    219e:	8b e0       	ldi	r24, 0x0B	; 11
    21a0:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
/**************************************************************************************/
		    UART_sendByte(0xCC);
    21a4:	8c ec       	ldi	r24, 0xCC	; 204
    21a6:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x33);
    21aa:	83 e3       	ldi	r24, 0x33	; 51
    21ac:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0xC3);
    21b0:	83 ec       	ldi	r24, 0xC3	; 195
    21b2:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x3C);
    21b6:	8c e3       	ldi	r24, 0x3C	; 60
    21b8:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	a8 ec       	ldi	r26, 0xC8	; 200
    21c2:	b2 e4       	ldi	r27, 0x42	; 66
    21c4:	8f a3       	std	Y+39, r24	; 0x27
    21c6:	98 a7       	std	Y+40, r25	; 0x28
    21c8:	a9 a7       	std	Y+41, r26	; 0x29
    21ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21cc:	6f a1       	ldd	r22, Y+39	; 0x27
    21ce:	78 a5       	ldd	r23, Y+40	; 0x28
    21d0:	89 a5       	ldd	r24, Y+41	; 0x29
    21d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	4a e7       	ldi	r20, 0x7A	; 122
    21da:	53 e4       	ldi	r21, 0x43	; 67
    21dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	8b a3       	std	Y+35, r24	; 0x23
    21e6:	9c a3       	std	Y+36, r25	; 0x24
    21e8:	ad a3       	std	Y+37, r26	; 0x25
    21ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21ec:	6b a1       	ldd	r22, Y+35	; 0x23
    21ee:	7c a1       	ldd	r23, Y+36	; 0x24
    21f0:	8d a1       	ldd	r24, Y+37	; 0x25
    21f2:	9e a1       	ldd	r25, Y+38	; 0x26
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e8       	ldi	r20, 0x80	; 128
    21fa:	5f e3       	ldi	r21, 0x3F	; 63
    21fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2200:	88 23       	and	r24, r24
    2202:	2c f4       	brge	.+10     	; 0x220e <main+0x320>
		__ticks = 1;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	9a a3       	std	Y+34, r25	; 0x22
    220a:	89 a3       	std	Y+33, r24	; 0x21
    220c:	3f c0       	rjmp	.+126    	; 0x228c <main+0x39e>
	else if (__tmp > 65535)
    220e:	6b a1       	ldd	r22, Y+35	; 0x23
    2210:	7c a1       	ldd	r23, Y+36	; 0x24
    2212:	8d a1       	ldd	r24, Y+37	; 0x25
    2214:	9e a1       	ldd	r25, Y+38	; 0x26
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	3f ef       	ldi	r19, 0xFF	; 255
    221a:	4f e7       	ldi	r20, 0x7F	; 127
    221c:	57 e4       	ldi	r21, 0x47	; 71
    221e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2222:	18 16       	cp	r1, r24
    2224:	4c f5       	brge	.+82     	; 0x2278 <main+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2226:	6f a1       	ldd	r22, Y+39	; 0x27
    2228:	78 a5       	ldd	r23, Y+40	; 0x28
    222a:	89 a5       	ldd	r24, Y+41	; 0x29
    222c:	9a a5       	ldd	r25, Y+42	; 0x2a
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e2       	ldi	r20, 0x20	; 32
    2234:	51 e4       	ldi	r21, 0x41	; 65
    2236:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	bc 01       	movw	r22, r24
    2240:	cd 01       	movw	r24, r26
    2242:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	9a a3       	std	Y+34, r25	; 0x22
    224c:	89 a3       	std	Y+33, r24	; 0x21
    224e:	0f c0       	rjmp	.+30     	; 0x226e <main+0x380>
    2250:	89 e1       	ldi	r24, 0x19	; 25
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	98 a3       	std	Y+32, r25	; 0x20
    2256:	8f 8f       	std	Y+31, r24	; 0x1f
    2258:	8f 8d       	ldd	r24, Y+31	; 0x1f
    225a:	98 a1       	ldd	r25, Y+32	; 0x20
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <main+0x36e>
    2260:	98 a3       	std	Y+32, r25	; 0x20
    2262:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2264:	89 a1       	ldd	r24, Y+33	; 0x21
    2266:	9a a1       	ldd	r25, Y+34	; 0x22
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	9a a3       	std	Y+34, r25	; 0x22
    226c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226e:	89 a1       	ldd	r24, Y+33	; 0x21
    2270:	9a a1       	ldd	r25, Y+34	; 0x22
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	69 f7       	brne	.-38     	; 0x2250 <main+0x362>
    2276:	14 c0       	rjmp	.+40     	; 0x22a0 <main+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2278:	6b a1       	ldd	r22, Y+35	; 0x23
    227a:	7c a1       	ldd	r23, Y+36	; 0x24
    227c:	8d a1       	ldd	r24, Y+37	; 0x25
    227e:	9e a1       	ldd	r25, Y+38	; 0x26
    2280:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	9a a3       	std	Y+34, r25	; 0x22
    228a:	89 a3       	std	Y+33, r24	; 0x21
    228c:	89 a1       	ldd	r24, Y+33	; 0x21
    228e:	9a a1       	ldd	r25, Y+34	; 0x22
    2290:	9e 8f       	std	Y+30, r25	; 0x1e
    2292:	8d 8f       	std	Y+29, r24	; 0x1d
    2294:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2296:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	f1 f7       	brne	.-4      	; 0x2298 <main+0x3aa>
    229c:	9e 8f       	std	Y+30, r25	; 0x1e
    229e:	8d 8f       	std	Y+29, r24	; 0x1d


_delay_ms(100);


		    UART_sendByte(0xAA);
    22a0:	8a ea       	ldi	r24, 0xAA	; 170
    22a2:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x3D);
    22a6:	8d e3       	ldi	r24, 0x3D	; 61
    22a8:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
/********************************************************************************/
		    UART_sendByte(0x00);
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x08);
    22b2:	88 e0       	ldi	r24, 0x08	; 8
    22b4:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x00);
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x04);
    22be:	84 e0       	ldi	r24, 0x04	; 4
    22c0:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
/*********************************************************************************/
		    UART_sendByte(0x00);
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x0C);
    22ca:	8c e0       	ldi	r24, 0x0C	; 12
    22cc:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
/*********************************************************************************/
		    UART_sendByte(0xCC);
    22d0:	8c ec       	ldi	r24, 0xCC	; 204
    22d2:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x33);
    22d6:	83 e3       	ldi	r24, 0x33	; 51
    22d8:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0xC3);
    22dc:	83 ec       	ldi	r24, 0xC3	; 195
    22de:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x3C);
    22e2:	8c e3       	ldi	r24, 0x3C	; 60
    22e4:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	a8 ec       	ldi	r26, 0xC8	; 200
    22ee:	b2 e4       	ldi	r27, 0x42	; 66
    22f0:	89 8f       	std	Y+25, r24	; 0x19
    22f2:	9a 8f       	std	Y+26, r25	; 0x1a
    22f4:	ab 8f       	std	Y+27, r26	; 0x1b
    22f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f8:	69 8d       	ldd	r22, Y+25	; 0x19
    22fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a e7       	ldi	r20, 0x7A	; 122
    2306:	53 e4       	ldi	r21, 0x43	; 67
    2308:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8d 8b       	std	Y+21, r24	; 0x15
    2312:	9e 8b       	std	Y+22, r25	; 0x16
    2314:	af 8b       	std	Y+23, r26	; 0x17
    2316:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2318:	6d 89       	ldd	r22, Y+21	; 0x15
    231a:	7e 89       	ldd	r23, Y+22	; 0x16
    231c:	8f 89       	ldd	r24, Y+23	; 0x17
    231e:	98 8d       	ldd	r25, Y+24	; 0x18
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	5f e3       	ldi	r21, 0x3F	; 63
    2328:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    232c:	88 23       	and	r24, r24
    232e:	2c f4       	brge	.+10     	; 0x233a <main+0x44c>
		__ticks = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9c 8b       	std	Y+20, r25	; 0x14
    2336:	8b 8b       	std	Y+19, r24	; 0x13
    2338:	3f c0       	rjmp	.+126    	; 0x23b8 <main+0x4ca>
	else if (__tmp > 65535)
    233a:	6d 89       	ldd	r22, Y+21	; 0x15
    233c:	7e 89       	ldd	r23, Y+22	; 0x16
    233e:	8f 89       	ldd	r24, Y+23	; 0x17
    2340:	98 8d       	ldd	r25, Y+24	; 0x18
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	3f ef       	ldi	r19, 0xFF	; 255
    2346:	4f e7       	ldi	r20, 0x7F	; 127
    2348:	57 e4       	ldi	r21, 0x47	; 71
    234a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    234e:	18 16       	cp	r1, r24
    2350:	4c f5       	brge	.+82     	; 0x23a4 <main+0x4b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2352:	69 8d       	ldd	r22, Y+25	; 0x19
    2354:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2356:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2358:	9c 8d       	ldd	r25, Y+28	; 0x1c
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e2       	ldi	r20, 0x20	; 32
    2360:	51 e4       	ldi	r21, 0x41	; 65
    2362:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9c 8b       	std	Y+20, r25	; 0x14
    2378:	8b 8b       	std	Y+19, r24	; 0x13
    237a:	0f c0       	rjmp	.+30     	; 0x239a <main+0x4ac>
    237c:	89 e1       	ldi	r24, 0x19	; 25
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	9a 8b       	std	Y+18, r25	; 0x12
    2382:	89 8b       	std	Y+17, r24	; 0x11
    2384:	89 89       	ldd	r24, Y+17	; 0x11
    2386:	9a 89       	ldd	r25, Y+18	; 0x12
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <main+0x49a>
    238c:	9a 8b       	std	Y+18, r25	; 0x12
    238e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2390:	8b 89       	ldd	r24, Y+19	; 0x13
    2392:	9c 89       	ldd	r25, Y+20	; 0x14
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	9c 8b       	std	Y+20, r25	; 0x14
    2398:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239a:	8b 89       	ldd	r24, Y+19	; 0x13
    239c:	9c 89       	ldd	r25, Y+20	; 0x14
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	69 f7       	brne	.-38     	; 0x237c <main+0x48e>
    23a2:	14 c0       	rjmp	.+40     	; 0x23cc <main+0x4de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a4:	6d 89       	ldd	r22, Y+21	; 0x15
    23a6:	7e 89       	ldd	r23, Y+22	; 0x16
    23a8:	8f 89       	ldd	r24, Y+23	; 0x17
    23aa:	98 8d       	ldd	r25, Y+24	; 0x18
    23ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	9c 8b       	std	Y+20, r25	; 0x14
    23b6:	8b 8b       	std	Y+19, r24	; 0x13
    23b8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ba:	9c 89       	ldd	r25, Y+20	; 0x14
    23bc:	98 8b       	std	Y+16, r25	; 0x10
    23be:	8f 87       	std	Y+15, r24	; 0x0f
    23c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c2:	98 89       	ldd	r25, Y+16	; 0x10
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <main+0x4d6>
    23c8:	98 8b       	std	Y+16, r25	; 0x10
    23ca:	8f 87       	std	Y+15, r24	; 0x0f


		    _delay_ms(100);


		    UART_sendByte(0xAA);
    23cc:	8a ea       	ldi	r24, 0xAA	; 170
    23ce:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x3D);
    23d2:	8d e3       	ldi	r24, 0x3D	; 61
    23d4:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
		    /********************************************************************************/
		    UART_sendByte(0x00);
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x08);
    23de:	88 e0       	ldi	r24, 0x08	; 8
    23e0:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x00);
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x06);
    23ea:	86 e0       	ldi	r24, 0x06	; 6
    23ec:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
		    /*********************************************************************************/
		    UART_sendByte(0x00);
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x0D);
    23f6:	8d e0       	ldi	r24, 0x0D	; 13
    23f8:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
		    /*********************************************************************************/
		    UART_sendByte(0xCC);
    23fc:	8c ec       	ldi	r24, 0xCC	; 204
    23fe:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x33);
    2402:	83 e3       	ldi	r24, 0x33	; 51
    2404:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0xC3);
    2408:	83 ec       	ldi	r24, 0xC3	; 195
    240a:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x3C);
    240e:	8c e3       	ldi	r24, 0x3C	; 60
    2410:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	a8 ec       	ldi	r26, 0xC8	; 200
    241a:	b2 e4       	ldi	r27, 0x42	; 66
    241c:	8b 87       	std	Y+11, r24	; 0x0b
    241e:	9c 87       	std	Y+12, r25	; 0x0c
    2420:	ad 87       	std	Y+13, r26	; 0x0d
    2422:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2424:	6b 85       	ldd	r22, Y+11	; 0x0b
    2426:	7c 85       	ldd	r23, Y+12	; 0x0c
    2428:	8d 85       	ldd	r24, Y+13	; 0x0d
    242a:	9e 85       	ldd	r25, Y+14	; 0x0e
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	4a e7       	ldi	r20, 0x7A	; 122
    2432:	53 e4       	ldi	r21, 0x43	; 67
    2434:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	8f 83       	std	Y+7, r24	; 0x07
    243e:	98 87       	std	Y+8, r25	; 0x08
    2440:	a9 87       	std	Y+9, r26	; 0x09
    2442:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2444:	6f 81       	ldd	r22, Y+7	; 0x07
    2446:	78 85       	ldd	r23, Y+8	; 0x08
    2448:	89 85       	ldd	r24, Y+9	; 0x09
    244a:	9a 85       	ldd	r25, Y+10	; 0x0a
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e8       	ldi	r20, 0x80	; 128
    2452:	5f e3       	ldi	r21, 0x3F	; 63
    2454:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2458:	88 23       	and	r24, r24
    245a:	2c f4       	brge	.+10     	; 0x2466 <main+0x578>
		__ticks = 1;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	9e 83       	std	Y+6, r25	; 0x06
    2462:	8d 83       	std	Y+5, r24	; 0x05
    2464:	3f c0       	rjmp	.+126    	; 0x24e4 <main+0x5f6>
	else if (__tmp > 65535)
    2466:	6f 81       	ldd	r22, Y+7	; 0x07
    2468:	78 85       	ldd	r23, Y+8	; 0x08
    246a:	89 85       	ldd	r24, Y+9	; 0x09
    246c:	9a 85       	ldd	r25, Y+10	; 0x0a
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	3f ef       	ldi	r19, 0xFF	; 255
    2472:	4f e7       	ldi	r20, 0x7F	; 127
    2474:	57 e4       	ldi	r21, 0x47	; 71
    2476:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    247a:	18 16       	cp	r1, r24
    247c:	4c f5       	brge	.+82     	; 0x24d0 <main+0x5e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2480:	7c 85       	ldd	r23, Y+12	; 0x0c
    2482:	8d 85       	ldd	r24, Y+13	; 0x0d
    2484:	9e 85       	ldd	r25, Y+14	; 0x0e
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e2       	ldi	r20, 0x20	; 32
    248c:	51 e4       	ldi	r21, 0x41	; 65
    248e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	bc 01       	movw	r22, r24
    2498:	cd 01       	movw	r24, r26
    249a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	9e 83       	std	Y+6, r25	; 0x06
    24a4:	8d 83       	std	Y+5, r24	; 0x05
    24a6:	0f c0       	rjmp	.+30     	; 0x24c6 <main+0x5d8>
    24a8:	89 e1       	ldi	r24, 0x19	; 25
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	9c 83       	std	Y+4, r25	; 0x04
    24ae:	8b 83       	std	Y+3, r24	; 0x03
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	9c 81       	ldd	r25, Y+4	; 0x04
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <main+0x5c6>
    24b8:	9c 83       	std	Y+4, r25	; 0x04
    24ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24bc:	8d 81       	ldd	r24, Y+5	; 0x05
    24be:	9e 81       	ldd	r25, Y+6	; 0x06
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	9e 83       	std	Y+6, r25	; 0x06
    24c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c6:	8d 81       	ldd	r24, Y+5	; 0x05
    24c8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	69 f7       	brne	.-38     	; 0x24a8 <main+0x5ba>
    24ce:	14 c0       	rjmp	.+40     	; 0x24f8 <main+0x60a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d0:	6f 81       	ldd	r22, Y+7	; 0x07
    24d2:	78 85       	ldd	r23, Y+8	; 0x08
    24d4:	89 85       	ldd	r24, Y+9	; 0x09
    24d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9e 83       	std	Y+6, r25	; 0x06
    24e2:	8d 83       	std	Y+5, r24	; 0x05
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	9e 81       	ldd	r25, Y+6	; 0x06
    24e8:	9a 83       	std	Y+2, r25	; 0x02
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <main+0x602>
    24f4:	9a 83       	std	Y+2, r25	; 0x02
    24f6:	89 83       	std	Y+1, r24	; 0x01


		    _delay_ms(100);


		    UART_sendByte(0xAA);
    24f8:	8a ea       	ldi	r24, 0xAA	; 170
    24fa:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x3D);
    24fe:	8d e3       	ldi	r24, 0x3D	; 61
    2500:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
		    /********************************************************************************/
		    UART_sendByte(0x00);
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x08);
    250a:	88 e0       	ldi	r24, 0x08	; 8
    250c:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x00);
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x08);
    2516:	88 e0       	ldi	r24, 0x08	; 8
    2518:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
		    /*********************************************************************************/
		    UART_sendByte(0x00);
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x0E);
    2522:	8e e0       	ldi	r24, 0x0E	; 14
    2524:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
		    /*********************************************************************************/
		    UART_sendByte(0xCC);
    2528:	8c ec       	ldi	r24, 0xCC	; 204
    252a:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x33);
    252e:	83 e3       	ldi	r24, 0x33	; 51
    2530:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0xC3);
    2534:	83 ec       	ldi	r24, 0xC3	; 195
    2536:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>

		    UART_sendByte(0x3C);
    253a:	8c e3       	ldi	r24, 0x3C	; 60
    253c:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
			LCD_gotoRawCol(1,0);
			LCD_IntToStr(num);*/



		    PORTD^=(1<<7);
    2540:	a2 e3       	ldi	r26, 0x32	; 50
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e2 e3       	ldi	r30, 0x32	; 50
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	90 81       	ld	r25, Z
    254a:	80 e8       	ldi	r24, 0x80	; 128
    254c:	89 27       	eor	r24, r25
    254e:	8c 93       	st	X, r24
    2550:	e6 cc       	rjmp	.-1588   	; 0x1f1e <main+0x30>

00002552 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	 UCSRA = (1<<U2X);
    255a:	eb e2       	ldi	r30, 0x2B	; 43
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	82 e0       	ldi	r24, 0x02	; 2
    2560:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2562:	ea e2       	ldi	r30, 0x2A	; 42
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	88 e1       	ldi	r24, 0x18	; 24
    2568:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    256a:	e0 e4       	ldi	r30, 0x40	; 64
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	86 e8       	ldi	r24, 0x86	; 134
    2570:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2572:	e0 e4       	ldi	r30, 0x40	; 64
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2578:	e9 e2       	ldi	r30, 0x29	; 41
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	8c e0       	ldi	r24, 0x0C	; 12
    257e:	80 83       	st	Z, r24
}
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <UART_sendByte>:
	
void UART_sendByte(const unit8 data)
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	0f 92       	push	r0
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(Pin_is_clear(UCSRA,UDRE)){}
    2592:	eb e2       	ldi	r30, 0x2B	; 43
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	88 2f       	mov	r24, r24
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	80 72       	andi	r24, 0x20	; 32
    259e:	90 70       	andi	r25, 0x00	; 0
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	b9 f3       	breq	.-18     	; 0x2592 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    25a4:	ec e2       	ldi	r30, 0x2C	; 44
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    25ac:	0f 90       	pop	r0
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <UART_recieveByte>:

unit8 UART_recieveByte(void)
{
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(Pin_is_clear(UCSRA,RXC)){}
    25bc:	eb e2       	ldi	r30, 0x2B	; 43
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	88 23       	and	r24, r24
    25c4:	dc f7       	brge	.-10     	; 0x25bc <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    25c6:	ec e2       	ldi	r30, 0x2C	; 44
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
}
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <UART_sendString>:

void UART_sendString(const unit8 *Str)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <UART_sendString+0x6>
    25d8:	0f 92       	push	r0
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	9b 83       	std	Y+3, r25	; 0x03
    25e0:	8a 83       	std	Y+2, r24	; 0x02
	unit8 i = 0;
    25e2:	19 82       	std	Y+1, r1	; 0x01
    25e4:	0e c0       	rjmp	.+28     	; 0x2602 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	9b 81       	ldd	r25, Y+3	; 0x03
    25f0:	fc 01       	movw	r30, r24
    25f2:	e2 0f       	add	r30, r18
    25f4:	f3 1f       	adc	r31, r19
    25f6:	80 81       	ld	r24, Z
    25f8:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
		i++;
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	8f 5f       	subi	r24, 0xFF	; 255
    2600:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const unit8 *Str)
{
	unit8 i = 0;
	while(Str[i] != '\0')
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	9b 81       	ldd	r25, Y+3	; 0x03
    260c:	fc 01       	movw	r30, r24
    260e:	e2 0f       	add	r30, r18
    2610:	f3 1f       	adc	r31, r19
    2612:	80 81       	ld	r24, Z
    2614:	88 23       	and	r24, r24
    2616:	39 f7       	brne	.-50     	; 0x25e6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <UART_receiveString>:

void UART_receiveString(unit8 *Str)
{
    2624:	0f 93       	push	r16
    2626:	1f 93       	push	r17
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	00 d0       	rcall	.+0      	; 0x262e <UART_receiveString+0xa>
    262e:	0f 92       	push	r0
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	9b 83       	std	Y+3, r25	; 0x03
    2636:	8a 83       	std	Y+2, r24	; 0x02
	unit8 i = 0;
    2638:	19 82       	std	Y+1, r1	; 0x01



	Str[i] = UART_recieveByte();
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	9b 81       	ldd	r25, Y+3	; 0x03
    2644:	8c 01       	movw	r16, r24
    2646:	02 0f       	add	r16, r18
    2648:	13 1f       	adc	r17, r19
    264a:	0e 94 da 12 	call	0x25b4	; 0x25b4 <UART_recieveByte>
    264e:	f8 01       	movw	r30, r16
    2650:	80 83       	st	Z, r24
    2652:	0f c0       	rjmp	.+30     	; 0x2672 <UART_receiveString+0x4e>

	while(Str[i]!='#')
	      {
		i++;
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	8f 5f       	subi	r24, 0xFF	; 255
    2658:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	9b 81       	ldd	r25, Y+3	; 0x03
    2664:	8c 01       	movw	r16, r24
    2666:	02 0f       	add	r16, r18
    2668:	13 1f       	adc	r17, r19
    266a:	0e 94 da 12 	call	0x25b4	; 0x25b4 <UART_recieveByte>
    266e:	f8 01       	movw	r30, r16
    2670:	80 83       	st	Z, r24



	Str[i] = UART_recieveByte();

	while(Str[i]!='#')
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	9b 81       	ldd	r25, Y+3	; 0x03
    267c:	fc 01       	movw	r30, r24
    267e:	e2 0f       	add	r30, r18
    2680:	f3 1f       	adc	r31, r19
    2682:	80 81       	ld	r24, Z
    2684:	83 32       	cpi	r24, 0x23	; 35
    2686:	31 f7       	brne	.-52     	; 0x2654 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();

	}

	Str[i] = '\0';
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	28 2f       	mov	r18, r24
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	9b 81       	ldd	r25, Y+3	; 0x03
    2692:	fc 01       	movw	r30, r24
    2694:	e2 0f       	add	r30, r18
    2696:	f3 1f       	adc	r31, r19
    2698:	10 82       	st	Z, r1
}
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	1f 91       	pop	r17
    26a6:	0f 91       	pop	r16
    26a8:	08 95       	ret

000026aa <__prologue_saves__>:
    26aa:	2f 92       	push	r2
    26ac:	3f 92       	push	r3
    26ae:	4f 92       	push	r4
    26b0:	5f 92       	push	r5
    26b2:	6f 92       	push	r6
    26b4:	7f 92       	push	r7
    26b6:	8f 92       	push	r8
    26b8:	9f 92       	push	r9
    26ba:	af 92       	push	r10
    26bc:	bf 92       	push	r11
    26be:	cf 92       	push	r12
    26c0:	df 92       	push	r13
    26c2:	ef 92       	push	r14
    26c4:	ff 92       	push	r15
    26c6:	0f 93       	push	r16
    26c8:	1f 93       	push	r17
    26ca:	cf 93       	push	r28
    26cc:	df 93       	push	r29
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	ca 1b       	sub	r28, r26
    26d4:	db 0b       	sbc	r29, r27
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	09 94       	ijmp

000026e2 <__epilogue_restores__>:
    26e2:	2a 88       	ldd	r2, Y+18	; 0x12
    26e4:	39 88       	ldd	r3, Y+17	; 0x11
    26e6:	48 88       	ldd	r4, Y+16	; 0x10
    26e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    26ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    26ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    26ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    26f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    26f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    26f4:	b9 84       	ldd	r11, Y+9	; 0x09
    26f6:	c8 84       	ldd	r12, Y+8	; 0x08
    26f8:	df 80       	ldd	r13, Y+7	; 0x07
    26fa:	ee 80       	ldd	r14, Y+6	; 0x06
    26fc:	fd 80       	ldd	r15, Y+5	; 0x05
    26fe:	0c 81       	ldd	r16, Y+4	; 0x04
    2700:	1b 81       	ldd	r17, Y+3	; 0x03
    2702:	aa 81       	ldd	r26, Y+2	; 0x02
    2704:	b9 81       	ldd	r27, Y+1	; 0x01
    2706:	ce 0f       	add	r28, r30
    2708:	d1 1d       	adc	r29, r1
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	ed 01       	movw	r28, r26
    2716:	08 95       	ret

00002718 <itoa>:
    2718:	fb 01       	movw	r30, r22
    271a:	9f 01       	movw	r18, r30
    271c:	e8 94       	clt
    271e:	42 30       	cpi	r20, 0x02	; 2
    2720:	c4 f0       	brlt	.+48     	; 0x2752 <itoa+0x3a>
    2722:	45 32       	cpi	r20, 0x25	; 37
    2724:	b4 f4       	brge	.+44     	; 0x2752 <itoa+0x3a>
    2726:	4a 30       	cpi	r20, 0x0A	; 10
    2728:	29 f4       	brne	.+10     	; 0x2734 <itoa+0x1c>
    272a:	97 fb       	bst	r25, 7
    272c:	1e f4       	brtc	.+6      	; 0x2734 <itoa+0x1c>
    272e:	90 95       	com	r25
    2730:	81 95       	neg	r24
    2732:	9f 4f       	sbci	r25, 0xFF	; 255
    2734:	64 2f       	mov	r22, r20
    2736:	77 27       	eor	r23, r23
    2738:	0e 94 bd 13 	call	0x277a	; 0x277a <__udivmodhi4>
    273c:	80 5d       	subi	r24, 0xD0	; 208
    273e:	8a 33       	cpi	r24, 0x3A	; 58
    2740:	0c f0       	brlt	.+2      	; 0x2744 <itoa+0x2c>
    2742:	89 5d       	subi	r24, 0xD9	; 217
    2744:	81 93       	st	Z+, r24
    2746:	cb 01       	movw	r24, r22
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	a1 f7       	brne	.-24     	; 0x2734 <itoa+0x1c>
    274c:	16 f4       	brtc	.+4      	; 0x2752 <itoa+0x3a>
    274e:	5d e2       	ldi	r21, 0x2D	; 45
    2750:	51 93       	st	Z+, r21
    2752:	10 82       	st	Z, r1
    2754:	c9 01       	movw	r24, r18
    2756:	0c 94 ad 13 	jmp	0x275a	; 0x275a <strrev>

0000275a <strrev>:
    275a:	dc 01       	movw	r26, r24
    275c:	fc 01       	movw	r30, r24
    275e:	67 2f       	mov	r22, r23
    2760:	71 91       	ld	r23, Z+
    2762:	77 23       	and	r23, r23
    2764:	e1 f7       	brne	.-8      	; 0x275e <strrev+0x4>
    2766:	32 97       	sbiw	r30, 0x02	; 2
    2768:	04 c0       	rjmp	.+8      	; 0x2772 <strrev+0x18>
    276a:	7c 91       	ld	r23, X
    276c:	6d 93       	st	X+, r22
    276e:	70 83       	st	Z, r23
    2770:	62 91       	ld	r22, -Z
    2772:	ae 17       	cp	r26, r30
    2774:	bf 07       	cpc	r27, r31
    2776:	c8 f3       	brcs	.-14     	; 0x276a <strrev+0x10>
    2778:	08 95       	ret

0000277a <__udivmodhi4>:
    277a:	aa 1b       	sub	r26, r26
    277c:	bb 1b       	sub	r27, r27
    277e:	51 e1       	ldi	r21, 0x11	; 17
    2780:	07 c0       	rjmp	.+14     	; 0x2790 <__udivmodhi4_ep>

00002782 <__udivmodhi4_loop>:
    2782:	aa 1f       	adc	r26, r26
    2784:	bb 1f       	adc	r27, r27
    2786:	a6 17       	cp	r26, r22
    2788:	b7 07       	cpc	r27, r23
    278a:	10 f0       	brcs	.+4      	; 0x2790 <__udivmodhi4_ep>
    278c:	a6 1b       	sub	r26, r22
    278e:	b7 0b       	sbc	r27, r23

00002790 <__udivmodhi4_ep>:
    2790:	88 1f       	adc	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	5a 95       	dec	r21
    2796:	a9 f7       	brne	.-22     	; 0x2782 <__udivmodhi4_loop>
    2798:	80 95       	com	r24
    279a:	90 95       	com	r25
    279c:	bc 01       	movw	r22, r24
    279e:	cd 01       	movw	r24, r26
    27a0:	08 95       	ret

000027a2 <_exit>:
    27a2:	f8 94       	cli

000027a4 <__stop_program>:
    27a4:	ff cf       	rjmp	.-2      	; 0x27a4 <__stop_program>
